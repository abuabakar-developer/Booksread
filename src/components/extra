import { signIn, signOut, useSession } from 'next-auth/react';
import Link from 'next/link';
import { AiOutlineShoppingCart } from 'react-icons/ai';
import { useSelector } from 'react-redux';
import { RootState } from '@/types/rootState';

const Navbar = () => {
  const { data: session } = useSession();
  const books = useSelector((state: RootState) => state.cart.books);
  const isLoggedIn = Boolean(session?.user);

  return (
    <div className="h-16 w-full bg-gray-700 shadow-lg sticky top-0 z-10">
      <div className="max-w-7xl mx-auto h-full flex items-center justify-between px-4 sm:px-6 lg:px-8">
        <div className="flex items-center gap-4">
          <Link href="/" className="text-white text-2xl font-bold hover:text-gray-300 transition duration-150">
            Abakar&apos;s Reads
          </Link>
        </div>
        <div className="flex items-center gap-4">
          {isLoggedIn ? (
            <>
              <span className="text-white">Welcome, {session?.user?.name || 'Guest'}!</span>
              <button
                onClick={() => signOut()}
                className="px-3 py-1 bg-white text-green-900 rounded-md transition duration-150 hover:bg-gray-700 hover:text-white"
              >
                Logout
              </button>
              <Link href="/cart" className="relative flex items-center text-white hover:text-gray-300 transition duration-150">
                <AiOutlineShoppingCart className="text-xl" />
                <span className="absolute bottom-0.5 left-3 w-4 h-4 bg-white text-green-900 flex items-center justify-center rounded-full text-xs">
                  {books?.length}
                </span>
              </Link>
            </>
          ) : (
            <>
              <Link href="/login" className="px-4 py-2 bg-gray-700 text-white rounded-md transition duration-150 hover:bg-gray-600">
                Log in
              </Link>
              <Link href="/register" className="text-white hover:text-gray-300 transition duration-150">
                Register
              </Link>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default Navbar;




//lib/mongodb.ts 
import mongoose from 'mongoose';

const MONGO_URL = process.env.MONGO_URL as string;

let isConnected = false;

export const connectToDatabase = async (): Promise<void> => {
  if (isConnected) return;

  if (!MONGO_URL) {
    throw new Error('MONGO_URL environment variable is not defined.');
  }

  try {
    await mongoose.connect(MONGO_URL);
    isConnected = true;
    console.log('MongoDB connected successfully');
  } catch (error) {
    console.error('MongoDB connection error:', error);
    process.exit(1); // Exit process with an error code
  }
};










// models/User.js
import mongoose from 'mongoose';
import bcrypt from 'bcryptjs';

const UserSchema = new mongoose.Schema({
  email: {
    type: String,
    required: [true, 'Please provide an email'],
    unique: true,
  },
  password: {
    type: String,
    required: [true, 'Please provide a password'],
  },
});

// Hash password before saving
UserSchema.pre('save', async function (next) {
  if (!this.isModified('password')) {
    next();
  }
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

// Compare user entered password with hashed password in database
UserSchema.methods.comparePassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

export default mongoose.models.User || mongoose.model('User', UserSchema);










///
// pages/api/auth/login.js
import { connectToDatabase } from '../../../lib/mongodb';
import User from '../../../models/User';
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET;

export default async function handler(req, res) {
  await connectToDatabase();

  if (req.method === 'POST') {
    const { email, password } = req.body;
    
    if (!email || !password) {
      return res.status(400).json({ message: 'Email and password are required' });
    }

    try {
      const user = await User.findOne({ email });
      if (!user || !(await user.comparePassword(password))) {
        return res.status(401).json({ message: 'Invalid credentials' });
      }

      const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: '1h' });
      res.status(200).json({ token });
    } catch (error) {
      res.status(500).json({ message: 'Server error' });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}











// pages/api/auth/register.js
import { connectToDatabase } from '../../../lib/mongodb';
import User from '../../../models/User';

export default async function handler(req, res) {
  await connectToDatabase();

  if (req.method === 'POST') {
    const { email, password } = req.body;
    
    if (!email || !password) {
      return res.status(400).json({ message: 'Email and password are required' });
    }


    
    try {
      const existingUser = await User.findOne({ email });
      if (existingUser) {
        return res.status(400).json({ message: 'User already exists' });
      }

      const user = new User({ email, password });
      await user.save();

      res.status(201).json({ message: 'User registered successfully' });
    } catch (error) {
      res.status(500).json({ message: 'Server error' });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}






// lib/auth.js
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET;

export const authenticateToken = (handler) => async (req, res) => {
  const authHeader = req.headers.authorization;
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) return res.status(401).json({ message: 'Unauthorized' });

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ message: 'Forbidden' });

    req.user = user;
    return handler(req, res);
  });
};












///pages/login.js 
import LoginForm from './LoginForm';
import Link from 'next/link';

export default function LoginPage() {
  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-green-500 via-blue-600 to-indigo-700 p-6">
      <div className="relative bg-white p-10 rounded-3xl shadow-2xl w-full max-w-md transform transition-transform duration-500 hover:scale-105">
        <div className="absolute inset-0 bg-gradient-to-r from-indigo-300 to-blue-300 opacity-20 rounded-3xl"></div>
        <h1 className="text-4xl font-extrabold mb-6 text-center text-gray-800 relative z-10">
          Welcome Back
        </h1>
        <p className="text-center text-gray-600 mb-8 relative z-10">
          Sign in to your account
        </p>
        <LoginForm />
        <p className="mt-6 text-center text-gray-700 relative z-10">
          Donâ€™t have an account?{' '}
          <Link href="/register" className="text-blue-700 font-semibold hover:text-indigo-500 hover:underline">
            Register here
          </Link>
        </p>
      </div>
    </div>
  );
}











///pages/registr.js 
import RegisterForm from '../components/RegisterForm';
import { FaUserPlus } from 'react-icons/fa';
import Link from 'next/link';

export default function RegisterPage() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-500 via-pink-500 to-red-500 p-6">
      <div className="relative p-10 bg-white shadow-2xl rounded-3xl max-w-lg w-full transform transition duration-500 hover:scale-105">
        <div className="absolute inset-0 bg-gradient-to-r from-purple-400 to-blue-400 opacity-20 rounded-3xl"></div>
        <div className="flex justify-center mb-6 relative z-10">
          <FaUserPlus className="text-6xl text-pink-600 animate-bounce" />
        </div>
        <h1 className="text-5xl font-bold text-center text-pink-900 mb-8 relative z-10">
          Create Account
        </h1>
        <RegisterForm />
        <p className="mt-8 text-center text-sm text-gray-600 relative z-10">
          Already have an account?{' '}
          <Link href="/login">
            <span className="text-pink-900 hover:underline font-bold">Login here</span>
          </Link>
        </p>
      </div>
    </div>
  );
}















///details page
'use client';

import React, { useEffect, useState, useRef } from 'react';
import { BsFillCartFill } from 'react-icons/bs';
import { FiStar } from 'react-icons/fi';
import Image from 'next/image';
import ReviewModal from '@/components/ReviewModal';
import ReviewCard from '@/components/ReviewCard';
import { loadStripe } from '@stripe/stripe-js';

const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY!);

const Details = ({ params }: { params: { id: string } }) => {
  const id = params.id;
  const URL = `https://www.googleapis.com/books/v1/volumes/${id}?key=${process.env.NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY}`;
  const [book, setBook] = useState<any>(null);
  const [reviews, setReviews] = useState<any[]>([]);
  const [showModal, setShowModal] = useState(false);
  const reviewSectionRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => { 
    const fetchDetails = async () => { 
      try {
        const res = await fetch(URL);
        const data = await res.json();

        const details = {
          title: data.volumeInfo.title,
          desc: data.volumeInfo.description || "No description available",
          id: data.id,
          cover_image: data.volumeInfo.imageLinks?.thumbnail || "/no-cover.jpg",
          pages: data.volumeInfo.pageCount || "N/A",
        };

        setBook(details);
      } catch (error) {
        console.log('Error fetching book details:', error);
      }
    };
    fetchDetails();
  }, [URL]);

  useEffect(() => {
    const fetchReviews = async () => {
      try {
        const res = await fetch(`/api/reviews?bookId=${id}`);
        const data = await res.json();
        setReviews(Array.isArray(data) ? data : []);
      } catch (error) {
        console.log('Error fetching reviews:', error);
        setReviews([]);
      }
    };
    fetchReviews();
  }, [id]);

  const handleShowModal = () => setShowModal(true);
  const handleHideModal = () => setShowModal(false);

  const handleAddToCart = async () => {
    if (!book) return;

    const price = book.pages !== "N/A" ? ((book.pages / 100) * 5).toFixed(2) : "0.00";

    try {
      const res = await fetch('/api/checkout_sessions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          items: [
            {
              name: book.title,
              price: parseFloat(price) * 100,
              quantity: 1
            },
          ],
        }),
      });

      if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
      }

      const { id } = await res.json();

      const stripe = await stripePromise;
      const { error } = await stripe!.redirectToCheckout({ sessionId: id });

      if (error) {
        console.error('Error redirecting to checkout:', error);
      }
    } catch (error) {
      console.error('Error creating checkout session or redirecting to checkout:', error);
    }
  };

  const handleShowReviews = () => {
    if (reviewSectionRef.current) {
      reviewSectionRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  };

  const handleReviewSubmit = async (newReview: any) => {
    try {
      const res = await fetch(`/api/reviews`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newReview),
      });

      if (!res.ok) {
        throw new Error('Failed to submit review');
      }

      const reviewData = await res.json();
      setReviews(prevReviews => [reviewData, ...prevReviews]);
      handleHideModal();
    } catch (error) {
      console.log('Error submitting review:', error);
    }
  };

  if (!book) {
    return <div>Loading...</div>;
  }

  return (
    <div className="mt-10 p-10 bg-gradient-to-r from-gray-50 to-gray-100 rounded-lg shadow-2xl">
      <div className="max-w-7xl mx-auto">
        <div className="flex flex-col md:flex-row gap-10">
          <div className="flex-1 relative h-80">
            <Image
              src={book.cover_image}
              alt="book cover"
              layout="fill"
              objectFit="cover"
              className="rounded-lg shadow-lg"
            />
          </div>
          <div className="flex-1 flex flex-col">
            <h1 className="text-5xl font-serif font-bold text-gray-900 mb-6">{book.title}</h1>
            <p className="text-lg text-gray-700 mb-6">{book.desc}</p>
            <div className="flex justify-between items-center mb-6">
              <span className="text-2xl font-semibold text-green-800">Price: ${(book.pages !== "N/A" ? (book.pages / 100) * 5 : 0).toFixed(2)}</span>
              <span className="text-2xl font-semibold text-gray-800">Pages: {book.pages}</span>
            </div>
            <div className="flex gap-4">
              <button
                onClick={handleAddToCart}
                className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-full flex items-center shadow-md transition transform hover:scale-105"
              >
                Add to Cart <BsFillCartFill className="ml-2" />
              </button>
              <button
                onClick={() => {
                  handleShowModal();
                  handleShowReviews();
                }}
                className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-6 rounded-full flex items-center shadow-md transition transform hover:scale-105"
              >
                Review Book <FiStar className="ml-2" />
              </button>
            </div>
            {showModal && (
              <ReviewModal
                handleHideModal={handleHideModal}
                bookId={book.id}
                onSubmit={handleReviewSubmit}
              />
            )}
          </div>
        </div>
        <div
          ref={reviewSectionRef}
          className="mt-10"
        >
          <h2 className="text-3xl font-bold text-gray-900 mb-6">Reviews</h2>
          <div className="grid gap-6">
            {reviews.length > 0 ? (
              reviews.map((review) => (
                <ReviewCard key={review._id} review={review} />
              ))
            ) : (
              <p className="text-gray-600">No reviews yet. Be the first to review!</p>
            )}
          </div>
        </div>
      </div>  
    </div>
  );
};

export default Details;



//caart

"use client"

import React from 'react';
import { AiOutlineClose } from 'react-icons/ai';
import Link from 'next/link';
import Image from 'next/image';
import { useDispatch, useSelector } from 'react-redux';
import { RootState } from '@/types/rootState';
import { removeBook } from '../redux/cartSlice';
import { loadStripe } from '@stripe/stripe-js';
import { Book } from '@/types/cartTypes';


const Cart = () => {
    // Ensure hooks are used correctly
    const { books } = useSelector((state: RootState) => state.cart);
    const dispatch = useDispatch();

    const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY || '');

    let totalPrice = 0;

    // Calculate total price
    books.forEach((book: Book) => {
        totalPrice += (book.quantity * book.price);
    });

    const handleRemoveBook = (book: Book) => {
        dispatch(removeBook({ id: book.id }));
    }

    const handleCheckout = async () => {
        const lineItems = books.map((book: Book) => ({
            price_data: {
                currency: 'usd',
                product_data: {
                    name: book.title,
                },
                unit_amount: book.price * 100,
            },
            quantity: book.quantity,
        }));

        const res = await fetch('/api/checkout', {
            headers: {
                'Content-Type': 'application/json',
            },
            method: 'POST',
            body: JSON.stringify(lineItems),
        });

        const data = await res.json();
        const stripe = await stripePromise;

        if (stripe) {
            await stripe.redirectToCheckout({ sessionId: data.id });
        }
    }

    return (
        <div className="container mx-auto p-4">
            {books.length > 0 && <h2 className="text-2xl font-semibold mb-4">Your cart</h2>}
            <div className="flex flex-wrap">
                <div className="w-full md:w-2/3">
                    {books.length > 0
                        ? books.map((book: Book) => (
                            <div key={book.id} className="flex items-center mb-4 p-4 border rounded-lg shadow-md">
                                <div className="cursor-pointer mr-4" onClick={() => handleRemoveBook(book)}>
                                    <AiOutlineClose />
                                </div>
                                <Link href={`/details/${book.id}`}>
                                    <Image src={book.cover_image} width={175} height={375} className="w-24 h-32 object-cover" alt={book.title} />
                                </Link>
                                <div className="ml-4 flex-grow">
                                    <h3 className="text-lg font-semibold">{book.title}</h3>
                                    <div className="flex items-center mt-2">
                                        <span className="mr-2">{book.quantity} x</span>
                                        <span className="font-semibold">${book.price}</span>
                                    </div>
                                </div>
                            </div>
                        ))
                        : <h1 className="text-xl font-semibold">No books in the cart. Go Shopping!</h1>
                    }
                </div>
                <div className="w-full md:w-1/3 p-4">
                    <div className="mb-4">
                        Total books: {books.length}
                    </div>
                    <div className="flex flex-col">
                        <span className="text-lg font-semibold mb-2">
                            Subtotal: ${totalPrice > 100 ? totalPrice : totalPrice + 5}
                        </span>
                        <button 
                            onClick={handleCheckout} 
                            disabled={books.length === 0} 
                            className={`py-2 px-4 rounded-lg ${books.length === 0 ? 'bg-gray-400' : 'bg-green-500 hover:bg-green-700'} text-white`}>
                            Order
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
}

export default Cart;





///bookcatalog
'use client';
import React, { useEffect, useState } from 'react';
import BookCard from './bookCard';
import Pagination from './pagination';
import Details from '@/app/details/[id]/page';
import { fetchBooks } from '../lib/fetchBooks';

// Define the Book type
type Book = {
  id: string;
  title: string;
  author: string;
  // Add any other properties you are using
};

const BookCatalog = () => {
  const [query, setQuery] = useState('the lord of the rings');
  const [searchType, setSearchType] = useState('intitle');
  const [books, setBooks] = useState<Book[]>([]); // Apply the Book type
  const [isLoading, setIsLoading] = useState(false);
  const [itemOffset, setItemOffset] = useState(0);
  const itemsPerPage = 6;
  const [selectedBookId, setSelectedBookId] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setIsLoading(true);
        const booksData = await fetchBooks(`${searchType}:${query}`);
        setBooks(booksData);
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [query, searchType]);

  const endOffset = itemOffset + itemsPerPage;
  const currentBooks = books.slice(itemOffset, endOffset);

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setQuery(e.target.value);
  };

  const handleSearchTypeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSearchType(e.target.value === 'title' ? 'intitle' : 'inauthor');
  };

  const handleBookClick = (book: Book) => {
    setSelectedBookId(book.id);
  };

  if (selectedBookId) {
    return <Details params={{ id: selectedBookId }} />;
  }

  return (
    <div className="py-20 h-full w-full bg-gradient-to-b from-green-200 via-blue-200 to-purple-200 dark:from-gray-800 dark:via-gray-900 dark:to-black">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex flex-col justify-center items-center gap-5 mb-10">
          <h5 className="text-2xl text-gray-900 dark:text-white font-semibold tracking-wide">Book Collection</h5>
          <h2 className="text-5xl text-gray-900 dark:text-white font-extrabold leading-tight text-center">
            Embark on Your Next Adventure
          </h2>
          <div className="flex gap-2 w-full max-w-lg shadow-lg rounded-full overflow-hidden bg-white/70 dark:bg-gray-800/70 backdrop-blur-md">
            <input
              type="text"
              value={query}
              onChange={handleSearch}
              placeholder="Search by title or author..."
              className="border-0 p-4 w-full rounded-l-full focus:ring-4 focus:ring-blue-500 outline-none bg-transparent dark:text-white placeholder-gray-500"
            />
            <select
              value={searchType}
              onChange={handleSearchTypeChange}
              className="border-0 p-4 bg-gradient-to-r from-blue-500 to-indigo-500 text-white rounded-r-full cursor-pointer focus:ring-4 focus:ring-blue-500 outline-none"
            >
              <option value="title">Title</option>
              <option value="author">Author</option>
            </select>
          </div>
        </div>

        {isLoading ? (
          <div className="flex justify-center items-center mt-20">
            <div className="border-t-4 border-b-4 border-blue-600 rounded-full w-16 h-16 animate-spin" />
          </div>
        ) : (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-10">
            {currentBooks.map((book: Book) => ( // Apply the Book type
              <div 
                key={book.id} 
                onClick={() => handleBookClick(book)} 
                className="relative transform transition duration-300 ease-in-out hover:scale-105 hover:rotate-2 cursor-pointer bg-white/70 dark:bg-gray-800/70 backdrop-blur-md shadow-lg rounded-lg p-4"
              >
                <BookCard book={book} />
                <div className="absolute top-2 right-2 bg-blue-500 text-white rounded-full px-2 py-1 text-xs">New</div>
              </div>
            ))}
          </div>
        )}
        
        {!isLoading && (
          <div className="mt-10">
            <Pagination
              setItemOffset={setItemOffset}
              itemsPerPage={itemsPerPage}
              books={books}
            />
          </div>
        )}
      </div>
    </div>
  );
};

export default BookCatalog;







///footer.tsx 
import { useState } from 'react';
import Link from 'next/link';
import { FaEnvelope, FaPhone, FaMapMarkerAlt, FaBookOpen, FaTwitter, FaFacebookF, FaInstagram } from 'react-icons/fa';

const Footer = () => {
  const [showAbout, setShowAbout] = useState(false);
  const [showContact, setShowContact] = useState(false);
  const [email, setEmail] = useState('');

  const handleShowAbout = () => {
    setShowAbout(!showAbout);
    setShowContact(false);
  };

  const handleShowContact = () => {
    setShowContact(!showContact);
    setShowAbout(false);
  };

  const handleSubscription = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (!email) {
      alert('Please enter a valid email address.');
      return;
    }

    try {
      const response = await fetch('/api/subscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });

      if (response.ok) {
        alert('Subscription successful! Thank you for subscribing.');
        setEmail('');
      } else if (response.status === 409) {
        alert('You are already subscribed.');
      } else {
        alert('Subscription failed. Please try again.');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('An error occurred. Please try again.');
    }
  };

  return (
    <footer className="relative overflow-hidden bg-gray-900 text-white py-16 md:py-24">
      <div className="absolute inset-0 bg-gradient-to-r from-blue-900 to-gray-900 opacity-80 -z-10 rounded-t-full blur-lg"></div>
      <div className="container mx-auto px-6 sm:px-10 lg:px-16 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-12 relative z-10">

        {/* About Us Section */}
        <div className="space-y-6">
          <button
            onClick={handleShowAbout}
            className="text-3xl font-bold mb-5 text-white pb-2 border-b-2 border-white flex items-center transform transition-transform duration-300 hover:scale-110"
          >
            <FaBookOpen className="mr-3" /> About Us
          </button>
          {showAbout && (
            <p className="text-base sm:text-lg leading-relaxed">
              Abakar Reads is your premier online bookstore, offering a diverse range of books for all readers. Our mission is to ignite a passion for reading by providing a seamless and delightful shopping experience.
            </p>
          )}
        </div>

        {/* Contact Us Section */}
        <div className="space-y-6">
          <button
            onClick={handleShowContact}
            className="text-3xl font-bold mb-5 text-white pb-2 border-b-2 border-white flex items-center transform transition-transform duration-300 hover:scale-110"
          >
            <FaEnvelope className="mr-3" /> Contact Us
          </button>
          {showContact && (
            <ul className="space-y-4 text-base sm:text-lg">
              <li className="flex items-center">
                <FaEnvelope className="mr-2" /> 
                <a href="mailto:support@abakarreads.com" className="underline hover:text-gray-300">
                  support@abakarreads.com
                </a>
              </li>
              <li className="flex items-center">
                <FaPhone className="mr-2" /> 03154195240
              </li>
              <li className="flex items-center">
                <FaMapMarkerAlt className="mr-2" /> 123 Bookstore Ave, Read City Jaranwala
              </li>
            </ul>
          )}
        </div>

        {/* Quick Links Section */}
        <div className="space-y-6">
          <h3 className="text-3xl font-bold mb-5 text-white pb-2 border-b-2 border-white flex items-center transform transition-transform duration-300 hover:scale-110">
            <FaBookOpen className="mr-3" /> Quick Links
          </h3>
          <ul className="space-y-4">
            <li>
              <button onClick={handleShowAbout} className="hover:text-gray-300 transition-colors duration-300">
                About Us
              </button>
            </li>
            <li>
              <button onClick={handleShowContact} className="hover:text-gray-300 transition-colors duration-300">
                Contact Us
              </button>
            </li>
            <li>
              <Link href="/" className="hover:text-gray-300 transition-colors duration-300">
                Home
              </Link>
            </li>
          </ul>
        </div>

        {/* Newsletter Subscription Section */}
        <div className="bg-opacity-80 backdrop-blur-md p-8 rounded-lg shadow-xl">
          <h3 className="text-3xl font-bold mb-5 text-white pb-2 border-b-2 border-white transform transition-transform duration-300 hover:scale-110">
            Subscribe to Our Newsletter
          </h3>
          <p className="text-base sm:text-lg mb-5">
            Stay updated with the latest book releases and exclusive offers.
          </p>
          <form onSubmit={handleSubscription} className="flex flex-col space-y-4">
            <input
              type="email"
              placeholder="Enter your email"
              className="px-4 py-3 rounded-lg bg-gray-800 text-gray-300 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
            <button
              type="submit"
              className="bg-blue-600 hover:bg-blue-800 text-white px-5 py-3 rounded-lg shadow-lg transition-all duration-300 transform hover:scale-105"
            >
              Subscribe
            </button>
          </form>
        </div>
      </div>

      {/* Social Media Links */}
      <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-5 text-2xl">
        <a href="https://twitter.com" className="text-white hover:text-gray-300 transition-colors duration-300" aria-label="Twitter">
          <FaTwitter />
        </a>
        <a href="https://facebook.com" className="text-white hover:text-gray-300 transition-colors duration-300" aria-label="Facebook">
          <FaFacebookF />
        </a>
        <a href="https://instagram.com" className="text-white hover:text-gray-300 transition-colors duration-300" aria-label="Instagram">
          <FaInstagram />
        </a>
      </div>

      <div className="border-t border-gray-800 mt-14 pt-8 text-center">
        <p className="text-sm sm:text-base">
          &copy; {new Date().getFullYear()} Abakar Reads. All rights reserved.
        </p>
        <p className="mt-2 text-xs sm:text-sm">
          "Reading is to the mind what exercise is to the body."
        </p>
      </div>
    </footer>
  );
};

export default Footer;





////bookscrd
import React from 'react';
import Image from 'next/image';

interface BookCardProps {
  book: {
    id: string;
    title: string;
    author_name?: string[];
    published_year?: number;
    public_rating?: number;
  };
}

const BookCard: React.FC<BookCardProps> = ({ book }) => {
  const coverImageUrl = `https://books.google.com/books/content?id=${book.id}&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api`;

  return (
    <div className="bg-white/70 dark:bg-gray-800/70 p-6 rounded-xl shadow-lg transform transition-transform hover:scale-105 hover:rotate-1 hover:shadow-2xl backdrop-blur-lg">
      <div className="relative w-full h-64 mb-6 overflow-hidden rounded-lg">
        <Image
          src={coverImageUrl}
          alt={`Cover of ${book.title}`}
          layout="fill"
          objectFit="cover"
          className="rounded-lg"
          quality={85}
        />
      </div>
      <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-2 line-clamp-2">{book.title}</h3>
      <p className="text-sm text-gray-700 dark:text-gray-300 mb-1">Author: {book.author_name?.join(', ') || 'Unknown'}</p>
      <p className="text-sm text-gray-700 dark:text-gray-300 mb-1">Published: {book.published_year || 'N/A'}</p>
      <p className="text-sm text-gray-700 dark:text-gray-300">Rating: {book.public_rating ? `${book.public_rating} / 5` : 'N/A'}</p>
    </div>
  );
};

export default BookCard;







//latestbookssection
import React, { useEffect, useState } from 'react';
import BookCard from './bookCard';
import Details from '@/app/details/[id]/page';
import { fetchBooks } from '../lib/fetchBooks';
import '@fontsource/poppins'; // Importing the "Poppins" font
import '@fontsource/montserrat'; // Montserrat for author
import '@fontsource/roboto-mono';

type Book = {
  id: string;
  title: string;
  author: string;
};

const LatestBooksSection = () => {
  const [latestBooks, setLatestBooks] = useState<Book[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [selectedBookId, setSelectedBookId] = useState<string | null>(null);
  const [showMore, setShowMore] = useState(false);

  useEffect(() => {
    const fetchLatestBooks = async () => {
      try {
        setIsLoading(true);
        const booksData = await fetchBooks('orderBy=newest');
        setLatestBooks(booksData.slice(0, 20));
      } catch (error) {
        console.error('Error fetching latest books:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchLatestBooks();
  }, []);

  const handleBookClick = (book: Book) => {
    setSelectedBookId(book.id);
  };

  const handleViewMoreClick = () => {
    setShowMore(true);
  };

  if (selectedBookId) {
    return <Details params={{ id: selectedBookId }} />;
  }

  return (
    <div className="py-20 bg-gradient-to-b from-teal-300 via-green-300 to-yellow-200 dark:bg-gradient-to-b dark:from-gray-900 dark:via-gray-700 dark:to-gray-900">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 className="text-4xl font-bold text-gray-900 dark:text-white mb-10 text-center" style={{ fontFamily: 'Poppins, sans-serif' }}>
          Discover the Latest Books
        </h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8">
          {latestBooks.slice(0, showMore ? 20 : 4).map((book) => (
            <div
              key={book.id}
              onClick={() => handleBookClick(book)}
              className="relative transform transition-transform duration-300 ease-in-out hover:scale-105 hover:shadow-xl cursor-pointer bg-gradient-to-r from-pink-400 via-red-500 to-yellow-500 dark:bg-gradient-to-r dark:from-teal-600 dark:via-teal-700 dark:to-teal-800 backdrop-blur-lg shadow-lg rounded-lg p-4"
              style={{ fontFamily: 'Poppins, sans-serif' }}
            >
              <BookCard book={book} />
              <div className="absolute top-2 right-2 bg-gradient-to-r from-teal-500 to-green-500 text-white rounded-full px-3 py-1 text-xs font-semibold animate-pulse">
                New
              </div>
            </div>
          ))}
        </div>
        {!showMore && (
          <div className="flex justify-center mt-8">
            <button
              onClick={handleViewMoreClick}
              className="text-white font-bold py-3 px-8 rounded-full bg-gradient-to-r from-teal-500 to-green-500 hover:from-green-500 hover:to-yellow-500 transition-colors duration-300"
              style={{ fontFamily: 'Poppins, sans-serif' }}
            >
              View More
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default LatestBooksSection;





///reviewcard
import React from 'react';
import { format } from 'timeago.js';
import Image from 'next/image';

interface ReviewCardProps {
  review: {
    userName: string;  
    createdAt: string;
    rating: number;
    content: string;   
  };
}

const ReviewCard: React.FC<ReviewCardProps> = ({ review }) => {
  return (
    <div className="w-full max-w-xs border border-transparent rounded-xl p-4 flex flex-col bg-gradient-to-r from-white via-gray-50 to-white shadow-lg transform transition-transform hover:scale-105 hover:shadow-2xl">
      <div className="flex items-center gap-4">
        <Image
          src="/woman.jpg"  
          alt="User avatar"
          width={48}
          height={48}
          className="h-12 w-12 rounded-full object-cover border-2 border-gradient-to-r from-pink-500 to-yellow-500"
        />
        <div>
          <h3 className="text-lg font-bold capitalize text-gray-800 mb-1">{review.userName || 'Anonymous'}</h3>
          <span className="text-xs text-gray-500">{format(review.createdAt) || 'N/A'}</span>
        </div>
      </div>
      <div className="mt-4 flex flex-col">
        <p className="text-sm text-gray-600 mb-2">Rating: 
          <span className="ml-1 font-semibold text-yellow-500">{review.rating}/5</span>
        </p>
        <p className="text-sm text-gray-700">{review.content}</p>
      </div>
    </div>
  );
};

export default ReviewCard;





///reviewform.tsx 
import { useState } from 'react';
import { useRouter } from 'next/router';

const ReviewForm = ({ bookId }: { bookId: string }) => {
  const [userName, setUserName] = useState('');
  const [rating, setRating] = useState(5);
  const [comment, setComment] = useState('');
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const res = await fetch(`/api/reviews/${bookId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ userName, rating, comment }),
    });

    if (res.ok) {
      setUserName('');
      setRating(5);
      setComment('');
      router.replace(router.asPath); // Refresh the page to display the new review
    }
  };

  return (
    <form onSubmit={handleSubmit} className="p-4 bg-white rounded shadow-md">
      <h2 className="text-lg font-semibold mb-4">Leave a Review</h2>
      <div className="mb-4">
        <label htmlFor="userName" className="block text-sm font-medium text-gray-700">
          Your Name
        </label>
        <input
          type="text"
          id="userName"
          value={userName}
          onChange={(e) => setUserName(e.target.value)}
          className="mt-1 p-2 block w-full border border-gray-300 rounded-md shadow-sm"
          required
        />
      </div>
      <div className="mb-4">
        <label htmlFor="rating" className="block text-sm font-medium text-gray-700">
          Rating
        </label>
        <select
          id="rating"
          value={rating}
          onChange={(e) => setRating(Number(e.target.value))}
          className="mt-1 p-2 block w-full border border-gray-300 rounded-md shadow-sm"
        >
          {[...Array(5)].map((_, i) => (
            <option key={i} value={i + 1}>
              {i + 1} Star{ i + 1 > 1 && 's'}
            </option>
          ))}
        </select>
      </div>
      <div className="mb-4">
        <label htmlFor="comment" className="block text-sm font-medium text-gray-700">
          Comment
        </label>
        <textarea
          id="comment"
          value={comment}
          onChange={(e) => setComment(e.target.value)}
          className="mt-1 p-2 block w-full border border-gray-300 rounded-md shadow-sm"
          required
        ></textarea>
      </div>
      <button
        type="submit"
        className="w-full bg-green-600 text-white py-2 px-4 rounded-md shadow hover:bg-green-700"
      >
        Submit Review
      </button>
    </form>
  );
};

export default ReviewForm;





//reviewmodal
import React, { useState } from 'react';
import { useSession } from 'next-auth/react';
import { AiOutlineClose } from 'react-icons/ai';

interface ReviewModalProps {
  handleHideModal: () => void;
  bookId: string;
  onSubmit: (review: any) => void;
}

const ReviewModal: React.FC<ReviewModalProps> = ({ handleHideModal, bookId, onSubmit }) => {
  const { data: session } = useSession();
  const [rating, setRating] = useState(1);
  const [content, setContent] = useState("");

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!rating || !content) {
      return;
    }

    try {
      const body = {
        rating,
        content,
        bookId,
        userName: session?.user?.name || 'Anonymous',
      };

      const response = await fetch('/api/reviews', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(body),
      });

      const result = await response.json();

      if (response.ok) {
        onSubmit(result);
        handleHideModal();
      } else {
        console.error('Error submitting review:', result.message);
      }
    } catch (error) {
      console.error('Error submitting review:', error);
    }
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-60 z-50">
      <div className="relative bg-white rounded-3xl shadow-2xl max-w-lg w-full p-6 transform transition-all duration-300 scale-95 hover:scale-100">
        <AiOutlineClose
          className="absolute top-4 right-4 text-gray-500 hover:text-gray-800 cursor-pointer"
          size={24}
          onClick={handleHideModal}
        />
        <h2 className="text-center text-3xl font-semibold text-gray-800 mb-6">Write a Review</h2>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="relative">
            <label htmlFor="rating" className="block text-gray-600 mb-1">Rating (1-5)</label>
            <input
              type="number"
              id="rating"
              value={rating}
              onChange={(e) => setRating(Number(e.target.value))}
              min={1}
              max={5}
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
              placeholder="Enter your rating"
            />
          </div>
          <div className="relative">
            <label htmlFor="content" className="block text-gray-600 mb-1">Your Experience</label>
            <textarea
              id="content"
              value={content}
              onChange={(e) => setContent(e.target.value)}
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 h-32 resize-none"
              placeholder="Describe your experience"
            />
          </div>
          <button
            type="submit"
            className="w-full py-3 bg-gradient-to-r from-green-500 to-green-700 text-white text-lg font-semibold rounded-xl shadow-md hover:bg-gradient-to-l focus:outline-none focus:ring-2 focus:ring-green-500 transition duration-200"
          >
            Submit
          </button>
        </form>
      </div>
    </div>
  );
};

export default ReviewModal;







///fooetr.tsx 
import { useState } from 'react';
import Link from 'next/link';
import { FaEnvelope, FaPhone, FaMapMarkerAlt, FaBookOpen, FaTwitter, FaFacebookF, FaInstagram } from 'react-icons/fa';

const Footer = () => {
  const [showAbout, setShowAbout] = useState(false);
  const [showContact, setShowContact] = useState(false);
  const [email, setEmail] = useState('');

  const handleShowAbout = () => {
    setShowAbout(!showAbout);
    setShowContact(false);
  };

  const handleShowContact = () => {
    setShowContact(!showContact);
    setShowAbout(false);
  };

  const handleSubscription = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (!email) {
      alert('Please enter a valid email address.');
      return;
    }

    try {
      const response = await fetch('/api/subscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });

      if (response.ok) {
        alert('Subscription successful! Thank you for subscribing.');
        setEmail('');
      } else if (response.status === 409) {
        alert('You are already subscribed.');
      } else {
        alert('Subscription failed. Please try again.');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('An error occurred. Please try again.');
    }
  };

  return (
    <footer className="relative overflow-hidden bg-gray-900 text-white py-16 md:py-24">
      <div className="absolute inset-0 bg-gradient-to-r from-blue-900 to-gray-900 opacity-80 -z-10 rounded-t-full blur-lg"></div>
      <div className="container mx-auto px-6 sm:px-10 lg:px-16 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-12 relative z-10">

        {/* About Us Section */}
        <div className="space-y-6">
          <button
            onClick={handleShowAbout}
            className="text-3xl font-bold mb-5 text-white pb-2 border-b-2 border-white flex items-center transform transition-transform duration-300 hover:scale-110"
          >
            <FaBookOpen className="mr-3" /> About Us
          </button>
          {showAbout && (
            <p className="text-base sm:text-lg leading-relaxed">
              Abakar Reads is your premier online bookstore, offering a diverse range of books for all readers. Our mission is to ignite a passion for reading by providing a seamless and delightful shopping experience.
            </p>
          )}
        </div>

        {/* Contact Us Section */}
        <div className="space-y-6">
          <button
            onClick={handleShowContact}
            className="text-3xl font-bold mb-5 text-white pb-2 border-b-2 border-white flex items-center transform transition-transform duration-300 hover:scale-110"
          >
            <FaEnvelope className="mr-3" /> Contact Us
          </button>
          {showContact && (
            <ul className="space-y-4 text-base sm:text-lg">
              <li className="flex items-center">
                <FaEnvelope className="mr-2" /> 
                <a href="mailto:support@abakarreads.com" className="underline hover:text-gray-300">
                  support@abakarreads.com
                </a>
              </li>
              <li className="flex items-center">
                <FaPhone className="mr-2" /> 03154195240
              </li>
              <li className="flex items-center">
                <FaMapMarkerAlt className="mr-2" /> 123 Bookstore Ave, Read City Jaranwala
              </li>
            </ul>
          )}
        </div>

        {/* Quick Links Section */}
        <div className="space-y-6">
          <h3 className="text-3xl font-bold mb-5 text-white pb-2 border-b-2 border-white flex items-center transform transition-transform duration-300 hover:scale-110">
            <FaBookOpen className="mr-3" /> Quick Links
          </h3>
          <ul className="space-y-4">
            <li>
              <button onClick={handleShowAbout} className="hover:text-gray-300 transition-colors duration-300">
                About Us
              </button>
            </li>
            <li>
              <button onClick={handleShowContact} className="hover:text-gray-300 transition-colors duration-300">
                Contact Us
              </button>
            </li>
            <li>
              <Link href="/" className="hover:text-gray-300 transition-colors duration-300">
                Home
              </Link>
            </li>
            <li>
            <Link href="/LatestBooksSection" className="hover:text-gray-300 transition-colors duration-300">
           Latest News
         </Link>
        </li>
          </ul>
        </div>

        {/* Newsletter Subscription Section */}
        <div className="bg-opacity-80 backdrop-blur-md p-8 rounded-lg shadow-xl">
          <h3 className="text-3xl font-bold mb-5 text-white pb-2 border-b-2 border-white transform transition-transform duration-300 hover:scale-110">
            Subscribe to Our Newsletter
          </h3>
          <p className="text-base sm:text-lg mb-5">
            Stay updated with the latest book releases and exclusive offers.
          </p>
          <form onSubmit={handleSubscription} className="flex flex-col space-y-4">
            <input
              type="email"
              placeholder="Enter your email"
              className="px-4 py-3 rounded-lg bg-gray-800 text-gray-300 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
            <button
              type="submit"
              className="bg-blue-600 hover:bg-blue-800 text-white px-5 py-3 rounded-lg shadow-lg transition-all duration-300 transform hover:scale-105"
            >
              Subscribe
            </button>
          </form>
        </div>
      </div>

      {/* Social Media Links */}
      <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-5 text-2xl">
        <a href="https://twitter.com" className="text-white hover:text-gray-300 transition-colors duration-300" aria-label="Twitter">
          <FaTwitter />
        </a>
        <a href="https://facebook.com" className="text-white hover:text-gray-300 transition-colors duration-300" aria-label="Facebook">
          <FaFacebookF />
        </a>
        <a href="https://instagram.com" className="text-white hover:text-gray-300 transition-colors duration-300" aria-label="Instagram">
          <FaInstagram />
        </a>
      </div>

      <div className="border-t border-gray-800 mt-14 pt-8 text-center">
        <p className="text-sm sm:text-base">
          &copy; {new Date().getFullYear()} Abakar Reads. All rights reserved.
        </p>
        <p className="mt-2 text-xs sm:text-sm">
          "Reading is to the mind what exercise is to the body."
        </p>
      </div>
    </footer>
  );
};

export default Footer;







////navbar
import { signIn, signOut, useSession } from 'next-auth/react';
import Link from 'next/link';
import { useSelector } from 'react-redux';
import { RootState } from '@/types/rootState';
import Image from 'next/image';

const Navbar = () => {
  const { data: session } = useSession();
  const books = useSelector((state: RootState) => state.cart.books);
  const isLoggedIn = Boolean(session?.user);

  return (
    <nav className="bg-gradient-to-r from-purple-800 to-black shadow-md sticky top-0 z-20">
      <div className="max-w-7xl mx-auto h-16 flex items-center justify-between px-4 sm:px-6 lg:px-8">
        <Link href="/" className="flex items-center text-white text-3xl font-extrabold hover:text-gray-300 transition-colors duration-150">
          Abakar&apos;s Reads
        </Link>
        <div className="flex items-center gap-6">
          {isLoggedIn ? (
            <>
              <span className="text-white text-sm">Welcome, {session?.user?.name || 'Guest'}!</span>
              <button
                onClick={() => signOut()}
                className="px-4 py-2 bg-gradient-to-r from-green-400 to-green-600 text-white rounded-md shadow-lg transition-transform transform duration-150 hover:scale-105 hover:from-green-500 hover:to-green-700"
              >
                Logout
              </button>
              <Link href="/cart" className="relative flex items-center text-white hover:text-gray-300 transition-colors duration-150">
                <Image src="/cart.png" alt="Cart" width={32} height={32} className="transition-transform duration-300 transform hover:scale-110" />
                {books.length > 0 && (
                  <span className="absolute top-0 right-0 w-5 h-5 bg-red-600 text-white text-xs flex items-center justify-center rounded-full shadow-lg animate-pulse">
                    {books.length}
                  </span>
                )}
              </Link>
            </>
          ) : (
            <>
              <Link href="/login" className="px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-700 text-white rounded-md shadow-lg transition-transform transform duration-150 hover:scale-105 hover:from-blue-600 hover:to-blue-800">
                Log in
              </Link>
              <Link href="/register" className="px-4 py-2 text-white rounded-md hover:text-gray-300 transition-colors duration-150">
                Register
              </Link>
            </>
          )}
        </div>
      </div>
    </nav>
  );
};

export default Navbar;











// pages/api/auth/login.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import { connectToDatabase } from '../../../lib/mongodb';
import User from '../../../models/User';
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET as string;

type Data = {
  token?: string;
  message?: string;
};

export default async function handler(req: NextApiRequest, res: NextApiResponse<Data>) {
  await connectToDatabase();

  if (req.method === 'POST') {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ message: 'Email and password are required' });
    }

    try {
      const user = await User.findOne({ email });
      if (!user || !(await user.comparePassword(password))) {
        return res.status(401).json({ message: 'Invalid credentials' });
      }

      const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: '1h' });
      res.status(200).json({ token });
    } catch (error) {
      res.status(500).json({ message: 'Server error' });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}













//LoginForm.tsx
import { useState, FormEvent } from 'react';
import { useRouter } from 'next/router';
import { FiMail, FiLock } from 'react-icons/fi';
import Link from 'next/link';

export default function LoginForm() {
  const [email, setEmail] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);
  const router = useRouter();

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setLoading(true);

    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      const result = await response.json();
      setLoading(false);

      if (response.ok) {
        localStorage.setItem('token', result.token);
        router.push('/'); // Redirect to the home page
      } else {
        alert(result.message);
      }
    } catch (error) {
      setLoading(false);
      alert('An unexpected error occurred.');
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-green-500 via-blue-600 to-indigo-700 p-6">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-xl shadow-lg ring-1 ring-gray-900/10">
        <h2 className="text-3xl font-bold text-center text-gray-800">Login</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="relative">
            <FiMail className="absolute top-3 left-4 text-gray-500" />
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="Email"
              required
              className="w-full px-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div className="relative">
            <FiLock className="absolute top-3 left-4 text-gray-500" />
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Password"
              required
              className="w-full px-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <button
            type="submit"
            className="w-full py-3 text-white bg-gradient-to-r from-blue-600 to-indigo-600 rounded-lg hover:bg-blue-700 transition duration-300"
            disabled={loading}
          >
            {loading ? 'Logging in...' : 'Login'}
          </button>
        </form>
        <p className="text-sm text-center text-gray-600 mt-4">
          Don&apos;t have an account?{' '}
          <Link href="/register" className="text-blue-600 hover:underline">
            Sign up
          </Link>
        </p>
      </div>
    </div>
  );
}




///regiseterfrom.tsx 

import { useState, FormEvent } from 'react';
import { FiMail, FiLock } from 'react-icons/fi';
import Link from 'next/link';

export default function RegisterForm() {
  const [email, setEmail] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setLoading(true);

    try {
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      const result = await response.json();
      setLoading(false);

      if (response.ok) {
        alert('Registration successful');
      } else {
        alert(result.message);
      }
    } catch (error) {
      setLoading(false);
      alert('An unexpected error occurred.');
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-purple-500 via-pink-500 to-red-500 p-6">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-xl shadow-lg ring-1 ring-gray-900/10">
        <h2 className="text-3xl font-bold text-center text-gray-800">Register</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="relative">
            <FiMail className="absolute top-3 left-4 text-gray-500" />
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="Email"
              required
              className="w-full px-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500"
            />
          </div>
          <div className="relative">
            <FiLock className="absolute top-3 left-4 text-gray-500" />
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Password"
              required
              className="w-full px-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500"
            />
          </div>
          <button
            type="submit"
            className="w-full py-3 text-white bg-gradient-to-r from-pink-600 to-red-600 rounded-lg hover:bg-pink-700 transition duration-300"
            disabled={loading}
          >
            {loading ? 'Registering...' : 'Register'}
          </button>
        </form>
        <p className="text-sm text-center text-gray-600 mt-4">
          Already have an account?{' '}
          <Link href="/login" className="text-pink-600 hover:underline">
            Log in
          </Link>
        </p>
      </div>
    </div>
  );
}









//layout.ts 
"use client";

import React, { ReactNode } from 'react';
import Navbar from '@/components/navbar';
import './globals.css';
import { Inter } from 'next/font/google';
import Footer from '@/components/footer';
import { SessionProvider } from 'next-auth/react';
import { Provider } from 'react-redux';
import { PersistGate } from 'redux-persist/integration/react';
import { persistor, store } from '../app/redux/store';
import FreeDelivery from '@/components/freeDelievery';

const inter = Inter({ subsets: ['latin'] });

interface RootLayoutProps {
  children: ReactNode;
}

export default function RootLayout({ children }: RootLayoutProps) {
  return (
    <html lang="en">
      <body className={inter.className}>
        {/* Wrap your application with the Redux Provider */}
        <Provider store={store}>
          {/* PersistGate delays the rendering of the UI until the persisted state has been retrieved and saved to Redux */}
          <PersistGate loading={null} persistor={persistor}>
            {/* SessionProvider provides the NextAuth session context to your app */}
            <SessionProvider>
              {/* Your components */}
              <FreeDelivery />
              <Navbar />
              {children}
              <Footer />
            </SessionProvider>
          </PersistGate>
        </Provider>
      </body>
    </html>
  );
}


