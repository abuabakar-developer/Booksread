import Image from 'next/image';
import { useEffect } from 'react';
import AOS from 'aos';
import 'aos/dist/aos.css';

const AboutUs = () => {
  useEffect(() => {
    AOS.init({
      duration: 1000,
      easing: 'ease-in-out',
      once: true,
    });
  }, []);

  return (
    <section className="relative bg-gray-50 py-16 overflow-hidden">
      <div className="absolute inset-0">
        <div className="bg-gradient-to-r from-green-100 to-transparent opacity-30 clip-path-hexagon"></div>
      </div>

      <div className="container mx-auto px-4 relative z-10">
        {/* Section Title */}
        <div className="text-center mb-16">
          <h2
            className="text-5xl font-extrabold text-gray-800 md:text-6xl"
            data-aos="fade-up"
          >
            About Us
          </h2>
          <p
            className="text-gray-600 mt-4 text-lg md:text-xl max-w-2xl mx-auto"
            data-aos="fade-up"
            data-aos-delay="200"
          >
            Discover more about our bookstore, our mission, and our team.
          </p>
        </div>

        {/* Introduction Section */}
        <div className="mb-16 text-center" data-aos="fade-up" data-aos-delay="300">
          <h3 className="text-4xl font-semibold text-green-700">Who We Are</h3>
          <p className="mt-4 text-gray-700 text-lg md:text-xl max-w-3xl mx-auto">
            Welcome to our online bookstore, your number one source for all genres of books. We're committed to providing the best book shopping experience with a focus on customer service, accessibility, and a vast selection of literature.
          </p>
        </div>

        {/* Mission Section */}
        <div className="mb-16 flex flex-col lg:flex-row items-center lg:items-start">
          <div className="lg:w-1/2 mb-8 lg:mb-0" data-aos="fade-right">
            <Image
              src="/abb.jpeg"
              alt="Our Bookstore"
              width={600}
              height={400}
              className="rounded-xl shadow-lg transform hover:scale-105 transition-transform duration-500 ease-in-out"
            />
          </div>
          <div className="lg:w-1/2 lg:pl-8" data-aos="fade-left">
            <h3 className="text-4xl font-semibold text-green-700">Our Mission</h3>
            <p className="mt-4 text-gray-700 text-lg md:text-xl">
              Our mission is to cultivate a love of reading by offering a diverse selection of books, from timeless classics to contemporary works. We aim to connect readers with books that inspire, inform, and entertain.
            </p>
          </div>
        </div>

        <div className="mb-16 text-center" data-aos="fade-up">
          <h3 className="text-4xl font-semibold text-green-700">Our Values</h3>
          <ul className="mt-6 list-disc list-inside text-gray-700 text-lg md:text-xl max-w-2xl mx-auto space-y-3">
            <li>Providing excellent customer service</li>
            <li>Offering a wide variety of books from all genres</li>
            <li>Supporting independent authors and publishers</li>
            <li>Creating a space where all readers feel welcome</li>
          </ul>
        </div>

        {/* Team Section */}
        <div className="mb-16 text-center">
          <h3 className="text-4xl font-semibold text-green-700" data-aos="fade-up">
            Meet Our Team
          </h3>
          <div
            className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-12 mt-12"
            data-aos="fade-up"
            data-aos-delay="200"
          >
            {/* Team Member 1 */}
            <div className="flex flex-col items-center text-center transition-transform transform hover:scale-105">
              <div className="w-40 h-40 relative">
                <Image
                  src="/ab.jpg"
                  alt="Abakarcody"
                  layout="fill"
                  objectFit="cover"
                  className="rounded-full border-4 border-green-700 shadow-lg"
                />
              </div>
              <h4 className="mt-4 font-semibold text-lg text-gray-800">Abakarcody</h4>
              <p className="text-gray-600">Founder & CEO</p>
            </div>

            {/* New Team Member: Abakar */}
            <div className="flex flex-col items-center text-center transition-transform transform hover:scale-105">
              <div className="w-40 h-40 relative">
                <Image
                  src="/saman.jpg"
                  alt="salmandotweb"
                  layout="fill"
                  objectFit="cover"
                  className="rounded-full border-4 border-green-700 shadow-lg"
                />
              </div>
              <h4 className="mt-4 font-semibold text-lg text-gray-800">salmandotweb</h4>
              <p className="text-gray-600">Co-Founder</p>
            </div>
          </div>
        </div>

        {/* Contact Section */}
        <div className="text-center" data-aos="fade-up">
          <h3 className="text-4xl font-semibold text-green-700">Get in Touch</h3>
          <p className="mt-6 text-gray-700 text-lg md:text-xl max-w-xl mx-auto">
            Have questions? Contact us at <a href="mailto:support@bookstore.com" className="text-green-600 hover:underline">support@bookstore.com</a> or call us at <span className="text-green-600">0315-4195240</span>.
          </p>
        </div>
      </div>
    </section>
  );
};

export default AboutUs;









import React, { useState, useEffect } from 'react';
import AOS from 'aos';
import 'aos/dist/aos.css';

const ContactUs: React.FC = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    message: '',
  });
  const [isSubmitted, setIsSubmitted] = useState(false); // Track if form was submitted

  useEffect(() => {
    AOS.init();
  }, []);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    setIsSubmitted(true);


    setFormData({
      name: '',
      email: '',
      message: '',
    });

  
    setTimeout(() => {
      setIsSubmitted(false);
    }, 3000);
  };

  return (
    <section className="py-16 bg-gradient-to-br from-gray-100 to-gray-300 text-gray-800">
      <div className="container mx-auto px-6">
        <div className="text-center mb-12">
          <h2 className="text-4xl font-bold text-gray-800 mb-4" data-aos="fade-up">Contact Us</h2>
          <p className="text-lg text-gray-700" data-aos="fade-up" data-aos-delay="100">
            Have any questions? Feel free to reach out, and we'll get back to you as soon as possible.
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-12">
          {/* Contact Information Section */}
          <div className="space-y-6" data-aos="fade-right">
            <h3 className="text-3xl font-semibold text-gray-800">Get in Touch</h3>
            <p className="text-gray-700">
              Whether you have a question about our books, services, or just want to say hello, we're here to help!
            </p>
            <div className="space-y-4">
              <div className="flex items-center">
                <svg className="w-6 h-6 text-green-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26c.47.31 1.11.31 1.58 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
                <span className="text-gray-600">contact@abakarreads.com</span>
              </div>
              <div className="flex items-center">
                <svg className="w-6 h-6 text-green-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M3 6h18M3 14h18M3 18h18" />
                </svg>
                <span className="text-gray-600">0315 4195240</span>
              </div>
              <div className="flex items-center">
                <svg className="w-6 h-6 text-green-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 8a6 6 0 0112 0v4a6 6 0 01-12 0V8zm0 4a4 4 0 108 0v-4a4 4 0 10-8 0v4z" />
                </svg>
                <span className="text-gray-600">123 Book St, Jaranwala, NY</span>
              </div>
            </div>
          </div>

          {/* Contact Form */}
          <div className="bg-white rounded-lg shadow-lg p-8" data-aos="fade-left">
            <h3 className="text-3xl font-semibold text-gray-800 mb-6">Send Us a Message</h3>
            <form className="space-y-4" onSubmit={handleSubmit}>
              <div>
                <label htmlFor="name" className="block text-sm text-gray-700">Your Name</label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  className="w-full mt-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-green-500 focus:border-green-500"
                  placeholder="Enter your name"
                  value={formData.name}
                  onChange={handleChange}
                />
              </div>
              <div>
                <label htmlFor="email" className="block text-sm text-gray-700">Your Email</label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  className="w-full mt-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-green-500 focus:border-green-500"
                  placeholder="Enter your email"
                  value={formData.email}
                  onChange={handleChange}
                />
              </div>
              <div>
                <label htmlFor="message" className="block text-sm text-gray-700">Message</label>
                <textarea
                  id="message"
                  name="message"
                  rows={5}
                  className="w-full mt-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-green-500 focus:border-green-500"
                  placeholder="Enter your message"
                  value={formData.message}
                  onChange={handleChange}
                ></textarea>
              </div>
              <button
                type="submit"
                className="w-full bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-all duration-300"
              >
                Send Message
              </button>
            </form>

            {/* Success message */}
            {isSubmitted && (
              <p className="text-green-600 mt-4">
                Your message has been sent successfully! We will get back to you soon.
              </p>
            )}
          </div>
        </div>
      </div>
    </section>
  );
};

export default ContactUs;








import React, { useEffect, useState } from 'react';
import BookCard from './bookCard';
import Details from '@/app/details/[id]/page';
import { fetchBooks } from '../lib/fetchBooks';
import '@fontsource/poppins';
import '@fontsource/roboto';

type Book = { 
  id: string;
  title: string;
  author: string;
};

const LatestBooksSection = ({ latestBooksRef }: { latestBooksRef: React.RefObject<HTMLDivElement> }) => {
  const [latestBooks, setLatestBooks] = useState<Book[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [selectedBookId, setSelectedBookId] = useState<string | null>(null);
  const [showMore, setShowMore] = useState(false);

  useEffect(() => {
    const fetchLatestBooks = async () => {
      try {
        setIsLoading(true);
        const booksData = await fetchBooks('orderBy=newest');
        setLatestBooks(booksData.slice(0, 20));
      } catch (error) {
        console.error('Error fetching latest books:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchLatestBooks();
  }, []);

  const handleBookClick = (book: Book) => {
    setSelectedBookId(book.id);
  };

  const handleViewMoreClick = () => {
    setShowMore(true);
  };

  if (selectedBookId) {
    return <Details params={{ id: selectedBookId }} />;
  }

  return (
    <div
      id="latest-books"
      ref={latestBooksRef}
      className="py-20 bg-gray-100 relative overflow-hidden"
    >
      <div className="absolute inset-0 opacity-20">
        <img src="/assets/books-background.svg" alt="Books Background" className="w-full h-full object-cover animate-float-slow" />
      </div>

      <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2
          className="text-4xl font-bold text-gray-900 mb-10 text-center"
          style={{ fontFamily: 'Poppins, sans-serif' }}
        >
          Discover the Latest Books
        </h2>

        {/* Book Grid with smooth animations */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8">
          {latestBooks.slice(0, showMore ? 20 : 4).map((book) => (
            <div
              key={book.id}
              onClick={() => handleBookClick(book)}
              className="relative transform transition-transform duration-300 ease-in-out hover:scale-105 hover:shadow-2xl cursor-pointer bg-white backdrop-blur-lg shadow-md rounded-lg p-4"
              style={{ fontFamily: 'Roboto, sans-serif' }}
            >
              <BookCard book={book} />
              {/* New Label with Pulse Effect */}
              <div className="absolute top-2 right-2 bg-teal-400 text-white rounded-full px-3 py-1 text-xs font-semibold animate-pulse">
                New
              </div>
            </div>
          ))}
        </div>

        {/* View More Button */}
        {!showMore && (
          <div className="flex justify-center mt-8">
            <button
              onClick={handleViewMoreClick}
              className="text-white font-bold py-3 px-8 rounded-full bg-teal-500 hover:bg-teal-600 transition-colors duration-300 shadow-md transform hover:scale-105"
              style={{ fontFamily: 'Poppins, sans-serif' }}
            >
              View More
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default LatestBooksSection;
  








"use client";
import React, { useEffect, useState } from "react";
import BookCard from "./bookCard";
import Pagination from "./pagination";
import Details from "@/app/details/[id]/page";
import { fetchBooks } from "../lib/fetchBooks";
import { SearchIcon } from "@heroicons/react/solid"; 

type Book = {
  id: string;
  title: string;
  author: string;
};

const BookCatalog = () => {
  const [query, setQuery] = useState("the lord of the rings");
  const [searchType, setSearchType] = useState("intitle");
  const [books, setBooks] = useState<Book[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [itemOffset, setItemOffset] = useState(0);
  const itemsPerPage = 6;
  const [selectedBookId, setSelectedBookId] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setIsLoading(true);
        const booksData = await fetchBooks(`${searchType}:${query}`);
        setBooks(booksData);
      } catch (error) {
        console.error("Error fetching data:", error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [query, searchType]);

  const endOffset = itemOffset + itemsPerPage;
  const currentBooks = books.slice(itemOffset, endOffset);

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setQuery(e.target.value);
  };

  const handleSearchTypeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSearchType(e.target.value === "title" ? "intitle" : "inauthor");
  };

  const handleBookClick = (book: Book) => {
    setSelectedBookId(book.id);
  };

  if (selectedBookId) {
    return <Details params={{ id: selectedBookId }} />;
  }

  return (
    <div className="py-20 mt-10 h-full w-full bg-gradient-to-br from-gray-100 to-gray-300">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      
        <div id="book-catalog-search" className="bg-white shadow-xl rounded-lg p-8">
          <div className="flex flex-col items-center gap-5 mb-10">
            <h5 className="text-3xl font-bold text-gray-900">Book Collection</h5>
            <h2 className="text-6xl font-extrabold text-gray-900 text-center">
              Embark on Your Next Adventure
            </h2>
          
            <div className="relative flex gap-2 w-full max-w-lg bg-gray-50 rounded-full shadow-md">
              <span className="absolute inset-y-0 left-0 flex items-center pl-3">
                <SearchIcon className="w-5 h-5 text-gray-500" />
              </span>
              <input
                type="text"
                value={query}
                onChange={handleSearch}
                placeholder="Search by title or author..."
                className="border-0 p-4 pl-10 w-full rounded-l-full focus:ring-2 focus:ring-blue-500 outline-none bg-transparent placeholder-gray-600"
              />
              <select
                value={searchType}
                onChange={handleSearchTypeChange}
                className="border-0 p-4 bg-blue-600 text-white rounded-r-full cursor-pointer focus:ring-2 focus:ring-blue-500 outline-none"
              >
                <option value="title">Title</option>
                <option value="author">Author</option>
              </select>
            </div>
          </div>

          {isLoading ? (
            <div className="flex justify-center items-center mt-20">
              <div className="border-t-4 border-b-4 border-blue-600 rounded-full w-16 h-16 animate-spin" />
            </div>
          ) : (
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
              {currentBooks.map((book: Book) => (
                <div 
                  key={book.id} 
                  onClick={() => handleBookClick(book)} 
                  className="relative transform transition-transform duration-300 ease-in-out hover:scale-105 cursor-pointer bg-white shadow-lg rounded-lg p-6"
                >
                  <BookCard book={book} />
                  <div className="absolute top-2 right-2 bg-blue-600 text-white rounded-full px-2 py-1 text-xs font-semibold">
                    New
                  </div>
                </div>
              ))}
            </div>
          )}

          {!isLoading && (
            <div className="mt-10">
              <Pagination
                setItemOffset={setItemOffset}
                itemsPerPage={itemsPerPage}
                books={books}
              />
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default BookCatalog;








// src/components/navbar.tsx
import React, { useEffect, useState } from 'react';
import { useSelector } from 'react-redux';
import { RootState } from '@/types/rootState';
import Link from 'next/link';
import Image from 'next/image';
import { MenuIcon, XIcon } from '@heroicons/react/outline';

const Navbar = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const books = useSelector((state: RootState) => state.cart.books);

  useEffect(() => {
    setIsLoggedIn(Boolean(localStorage.getItem('token')));
  }, []);

  const handleLogout = () => {  
    localStorage.removeItem('token');
    setIsLoggedIn(false);
  };

  const menuItems = (
    <>
      {isLoggedIn ? (
        <>
          <span className="text-white text-sm">Welcome, User!</span>
          <button
            onClick={handleLogout}
            className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md transition-transform duration-150 hover:scale-105"
          >
            Logout
          </button>
          <Link href="/cart" className="relative">
            <Image
              src="/cart.png"
              alt="Cart"
              width={32}
              height={32}
              className="transition-transform duration-300 hover:scale-110"
            />
            {books.length > 0 && (
              <span className="absolute -top-2 -right-2 w-5 h-5 bg-red-600 text-white text-xs flex items-center justify-center rounded-full shadow-lg animate-pulse">
                {books.length}
              </span>
            )}
          </Link>
        </>
      ) : (
        <>
          <Link href="/login" className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-transform duration-150 hover:scale-105">
            Log in
          </Link>
          <Link href="/register" className="px-4 py-2 text-white hover:text-gray-300">
            Register
          </Link>
        </>
      )}
    </>
  );

  return (
    <nav className="bg-gradient-to-r from-purple-900 via-indigo-800 to-blue-900 shadow-lg sticky top-0 z-20">
      <div className="max-w-7xl mx-auto h-16 flex items-center justify-between px-4 sm:px-6 lg:px-8">
        {/* Logo */}
        <Link href="/" className="flex items-center text-white text-2xl font-extrabold">
          <Image src="/book-icon.png" alt="Book Icon" width={40} height={40} />
          <span className="ml-2 hover:text-gray-300 transition-colors duration-150">
            Abakar's Reads
          </span>
        </Link>

        {/* Menu Toggle for Mobile */}
        <div className="lg:hidden flex items-center">
          <button onClick={() => setIsMenuOpen(!isMenuOpen)} aria-label="Toggle Menu">
            {isMenuOpen ? (
              <XIcon className="w-8 h-8 text-white" />
            ) : (
              <MenuIcon className="w-8 h-8 text-white" />
            )}
          </button>
        </div>

        {/* Desktop Menu */}
        <div className="hidden lg:flex items-center space-x-6">{menuItems}</div>

        {/* Mobile Menu */}
        {isMenuOpen && (
          <div className="lg:hidden absolute top-16 left-0 right-0 bg-gradient-to-r from-indigo-800 to-blue-900 shadow-lg p-4 space-y-4 z-10">
            {menuItems}
          </div>
        )}
      </div>
    </nav>
  );
};

export default Navbar;








'use client';

import React, { useEffect, useState, useRef } from 'react';
import { BsFillCartFill } from 'react-icons/bs';
import { FiStar } from 'react-icons/fi';
import Image from 'next/image';
import ReviewModal from '@/components/ReviewModal';
import ReviewCard from '@/components/ReviewCard';
import { loadStripe } from '@stripe/stripe-js';

const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY!);

const Details = ({ params }: { params: { id: string } }) => {
  const id = params.id;
  const URL = `https://www.googleapis.com/books/v1/volumes/${id}?key=${process.env.NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY}`;
  const [book, setBook] = useState<any>(null);
  const [reviews, setReviews] = useState<any[]>([]);
  const [showModal, setShowModal] = useState(false);
  const reviewSectionRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => { 
    const fetchDetails = async () => { 
      try {
        const res = await fetch(URL);
        const data = await res.json();

        const details = {
          title: data.volumeInfo.title,
          desc: data.volumeInfo.description || "No description available",
          id: data.id,
          cover_image: data.volumeInfo.imageLinks?.thumbnail || "/no-cover.jpg",
          pages: data.volumeInfo.pageCount || "N/A",
        };

        setBook(details);
      } catch (error) {
        console.log('Error fetching book details:', error);
      }
    };
    fetchDetails();
  }, [URL]);

  useEffect(() => {
    const fetchReviews = async () => {
      try {
        const res = await fetch(`/api/reviews?bookId=${id}`);
        const data = await res.json();
        setReviews(Array.isArray(data) ? data : []);
      } catch (error) {
        console.log('Error fetching reviews:', error);
        setReviews([]);
      }
    };
    fetchReviews();
  }, [id]);

  const handleShowModal = () => setShowModal(true);
  const handleHideModal = () => setShowModal(false);

  const handleAddToCart = async () => {
    if (!book) return;

    const price = book.pages !== "N/A" ? ((book.pages / 100) * 5).toFixed(2) : "0.00";

    try {
      const res = await fetch('/api/checkout_sessions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          items: [
            {
              name: book.title,
              price: parseFloat(price) * 100,
              quantity: 1
            },
          ],
        }),
      });

      if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
      }

      const { id } = await res.json();

      const stripe = await stripePromise;
      const { error } = await stripe!.redirectToCheckout({ sessionId: id });

      if (error) {
        console.error('Error redirecting to checkout:', error);
      }
    } catch (error) {
      console.error('Error creating checkout session or redirecting to checkout:', error);
    }
  };

  const handleShowReviews = () => {
    if (reviewSectionRef.current) {
      reviewSectionRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  };

  const handleReviewSubmit = async (newReview: any) => {
    try {
      const res = await fetch(`/api/reviews`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newReview),
      });

      if (!res.ok) {
        throw new Error('Failed to submit review');
      }

      const reviewData = await res.json();
      setReviews(prevReviews => [reviewData, ...prevReviews]);
      handleHideModal();
    } catch (error) {
      console.log('Error submitting review:', error);
    }
  };

  if (!book) {
    return <div>Loading...</div>;
  }

  return (
    <div className="mt-10 p-10 bg-gradient-to-r from-gray-50 to-gray-100 rounded-lg shadow-2xl">
      <div className="max-w-7xl mx-auto">
        <div className="flex flex-col md:flex-row gap-10">
          {/* Mobile layout: image on top, then content */}
          <div className="flex-1 order-2 md:order-1 relative h-80">
            <Image
              src={book.cover_image}
              alt="book cover"
              layout="fill"
              objectFit="cover"
              className="rounded-lg shadow-lg"
            />
          </div>
          <div className="flex-1 flex flex-col order-1 md:order-2">
            <h1 className="text-5xl font-serif font-bold text-gray-900 mb-6">{book.title}</h1>
            <p className="text-lg text-gray-700 mb-6">{book.desc}</p>
            <div className="flex justify-between items-center mb-6">
              <span className="text-2xl font-semibold text-green-800">Price: ${(book.pages !== "N/A" ? (book.pages / 100) * 5 : 0).toFixed(2)}</span>
              <span className="text-2xl font-semibold text-gray-800">Pages: {book.pages}</span>
            </div>
            <div className="flex gap-4">
              <button
                onClick={handleAddToCart}
                className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-full flex items-center shadow-md transition transform hover:scale-105"
              >
                Add to Cart <BsFillCartFill className="ml-2" />
              </button>
              <button
                onClick={() => {
                  handleShowModal();
                  handleShowReviews();
                }}
                className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-6 rounded-full flex items-center shadow-md transition transform hover:scale-105"
              >
                Review Book <FiStar className="ml-2" />
              </button>
            </div>
            {showModal && (
              <ReviewModal
                handleHideModal={handleHideModal}
                bookId={book.id}
                onSubmit={handleReviewSubmit}
              />
            )}
          </div>
        </div>
        <div
          ref={reviewSectionRef}
          className="mt-10"
        >
          <h2 className="text-3xl font-bold text-gray-900 mb-6">Reviews</h2>
          <div className="grid gap-6">
            {reviews.length > 0 ? (
              reviews.map((review) => (
                <ReviewCard key={review._id} review={review} />
              ))
            ) : (
              <p className="text-gray-600">No reviews yet. Be the first to review!</p>
            )}
          </div>
        </div>
      </div>  
    </div>
  );
};

export default Details;












//layout.ts 
"use client";
import React, { ReactNode } from 'react';
import Navbar from '@/components/navbar';
import './globals.css';
import { Inter } from 'next/font/google';
import Footer from '@/components/footer';
import { SessionProvider } from 'next-auth/react';
import { Provider } from 'react-redux';
import { PersistGate } from 'redux-persist/integration/react';
import { persistor, store } from '../app/redux/store';
import FreeDelivery from '@/components/freeDelievery';


const inter = Inter({ subsets: ['latin'] });

interface RootLayoutProps {
  children: ReactNode;
}

export default function RootLayout({ children }: RootLayoutProps) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <Provider store={store}>
          <PersistGate loading={null} persistor={persistor}>
            <SessionProvider>
              <FreeDelivery />
              <Navbar />
              {children}
              <Footer />
            </SessionProvider>
          </PersistGate>
        </Provider>
      </body>
    </html>
  );
}


