//lib/mongodb.ts 
import mongoose from 'mongoose';

const MONGO_URL = process.env.MONGO_URL as string;

let isConnected = false;

export const connectToDatabase = async (): Promise<void> => {
  if (isConnected) return;

  if (!MONGO_URL) {
    throw new Error('MONGO_URL environment variable is not defined.');
  }

  try {
    await mongoose.connect(MONGO_URL);
    isConnected = true;
    console.log('MongoDB connected successfully');
  } catch (error) {
    console.error('MongoDB connection error:', error);
    process.exit(1); // Exit process with an error code
  }
};











// models/User.js
import mongoose from 'mongoose';
import bcrypt from 'bcryptjs';

const UserSchema = new mongoose.Schema({
  email: {
    type: String,
    required: [true, 'Please provide an email'],
    unique: true,
  },
  password: {
    type: String,
    required: [true, 'Please provide a password'],
  },
});

// Hash password before saving
UserSchema.pre('save', async function (next) {
  if (!this.isModified('password')) {
    next();
  }
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

// Compare user entered password with hashed password in database
UserSchema.methods.comparePassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

export default mongoose.models.User || mongoose.model('User', UserSchema);










// pages/api/auth/register.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import { connectToDatabase } from '../../../lib/mongodb';
import User from '../../../models/User';

type Data = {
  message?: string;
};

export default async function handler(req: NextApiRequest, res: NextApiResponse<Data>) {
  await connectToDatabase();

  if (req.method === 'POST') {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ message: 'Email and password are required' });
    }

    try {
      const existingUser = await User.findOne({ email });
      if (existingUser) {
        return res.status(400).json({ message: 'User already exists' });
      }

      const user = new User({ email, password });
      await user.save();

      res.status(201).json({ message: 'User registered successfully' });
    } catch (error) {
      res.status(500).json({ message: 'Server error' });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}








// pages/api/auth/login.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import { connectToDatabase } from '../../../lib/mongodb';
import User from '../../../models/User';
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET as string;

type Data = {
  token?: string;
  message?: string;
};

export default async function handler(req: NextApiRequest, res: NextApiResponse<Data>) {
  await connectToDatabase();

  if (req.method === 'POST') {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ message: 'Email and password are required' });
    }

    try {
      const user = await User.findOne({ email });
      if (!user || !(await user.comparePassword(password))) {
        return res.status(401).json({ message: 'Invalid credentials' });
      }

      const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: '1h' });
      res.status(200).json({ token });
    } catch (error) {
      res.status(500).json({ message: 'Server error' });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}









///pages/LoginForm.tsx

import LoginForm from './LoginForm';
import Link from 'next/link';
import { NextPage } from 'next';

const LoginPage: NextPage = () => {
  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-green-500 via-blue-600 to-indigo-700 p-6">
      <div className="relative bg-white p-10 rounded-3xl shadow-lg ring-1 ring-gray-900/10 w-full max-w-md">
        <div className="absolute inset-0 bg-gradient-to-r from-indigo-300 to-blue-300 opacity-20 rounded-3xl"></div>
        <h1 className="text-4xl font-extrabold text-center text-gray-800 relative z-10 mb-4">
          Welcome Back
        </h1>
        <p className="text-center text-gray-600 relative z-10 mb-8">
          Sign in to your account
        </p>
        <LoginForm />
        <p className="mt-6 text-center text-gray-700 relative z-10">
          Donâ€™t have an account?{' '}
          <Link href="/register" className="text-blue-600 font-semibold hover:text-indigo-500 hover:underline">
            Register here
          </Link>
        </p>
      </div>
    </div>
  );
};

export default LoginPage;







//pages/protected/tsx
import { getSession } from 'next-auth/react';
import { GetServerSideProps } from 'next';

export default function ProtectedPage() {
  return <div>This is a protected page.</div>;
}

//export const getServerSideProps: GetServerSideProps = async (context) => {
//  const session = await getSession(context);
//
//  if (!session) {
//    return {
//      redirect: {
//        destination: '/auth/signin',
//        permanent: false,
//      },
//    };
//  }
//
//  return {
//    props: { session },
//  };
//};






//LoginForm.tsx
import { useState, FormEvent } from 'react';
import { useRouter } from 'next/router';
import { FiMail, FiLock } from 'react-icons/fi';
import Link from 'next/link';

export default function LoginForm() {
  const [email, setEmail] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);
  const router = useRouter();

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setLoading(true);

    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      const result = await response.json();
      setLoading(false);

      if (response.ok) {
        localStorage.setItem('token', result.token);
        router.push('/'); // Redirect to the home page
      } else {
        alert(result.message);
      }
    } catch (error) {
      setLoading(false);
      alert('An unexpected error occurred.');
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-green-500 via-blue-600 to-indigo-700 p-6">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-xl shadow-lg ring-1 ring-gray-900/10">
        <h2 className="text-3xl font-bold text-center text-gray-800">Login</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="relative">
            <FiMail className="absolute top-3 left-4 text-gray-500" />
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="Email"
              required
              className="w-full px-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div className="relative">
            <FiLock className="absolute top-3 left-4 text-gray-500" />
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Password"
              required
              className="w-full px-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <button
            type="submit"
            className="w-full py-3 text-white bg-gradient-to-r from-blue-600 to-indigo-600 rounded-lg hover:bg-blue-700 transition duration-300"
            disabled={loading}
          >
            {loading ? 'Logging in...' : 'Login'}
          </button>
        </form>
        <p className="text-sm text-center text-gray-600 mt-4">
          Don&apos;t have an account?{' '}
          <Link href="/register" className="text-blue-600 hover:underline">
            Sign up
          </Link>
        </p>
      </div>
    </div>
  );
}








//regisetrForm.tsx 

import { useState, FormEvent } from 'react';
import { FiMail, FiLock } from 'react-icons/fi';
import Link from 'next/link';

export default function RegisterForm() {
  const [email, setEmail] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setLoading(true);

    try {
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      const result = await response.json();
      setLoading(false);

      if (response.ok) {
        alert('Registration successful');
      } else {
        alert(result.message);
      }
    } catch (error) {
      setLoading(false);
      alert('An unexpected error occurred.');
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-purple-500 via-pink-500 to-red-500 p-6">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-xl shadow-lg ring-1 ring-gray-900/10">
        <h2 className="text-3xl font-bold text-center text-gray-800">Register</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="relative">
            <FiMail className="absolute top-3 left-4 text-gray-500" />
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="Email"
              required
              className="w-full px-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500"
            />
          </div>
          <div className="relative">
            <FiLock className="absolute top-3 left-4 text-gray-500" />
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Password"
              required
              className="w-full px-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500"
            />
          </div>
          <button
            type="submit"
            className="w-full py-3 text-white bg-gradient-to-r from-pink-600 to-red-600 rounded-lg hover:bg-pink-700 transition duration-300"
            disabled={loading}
          >
            {loading ? 'Registering...' : 'Register'}
          </button>
        </form>
        <p className="text-sm text-center text-gray-600 mt-4">
          Already have an account?{' '}
          <Link href="/login" className="text-pink-600 hover:underline">
            Log in
          </Link>
        </p>
      </div>
    </div>
  );
}








//checkoutButton.tsx 

import { loadStripe } from '@stripe/stripe-js';
import { useState } from 'react';

const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY!);

const CheckoutButton = ({ items }: { items: Array<{ id: string; quantity: number }> }) => {
  const [loading, setLoading] = useState(false);

  const handleClick = async () => {
    setLoading(true);
    const response = await fetch('/api/create-checkout-session', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ items }),
    });

    const { id } = await response.json();
    const stripe = await stripePromise;

    const { error } = await stripe!.redirectToCheckout({ sessionId: id });

    if (error) {
      console.error(error);
      setLoading(false);
    }
  };

  return (
    <button
      role="link"
      onClick={handleClick}
      disabled={loading}
      className="px-4 py-2 bg-blue-500 text-white rounded"
    >
      {loading ? 'Processing...' : 'Checkout'}
    </button>
  );
};

export default CheckoutButton;





/////navbar.tsx 
import { useEffect, useState } from 'react';
import Link from 'next/link';
import { useSelector } from 'react-redux';
import { RootState } from '@/types/rootState';
import Image from 'next/image';

const Navbar = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const books = useSelector((state: RootState) => state.cart.books);

  useEffect(() => {
    const token = localStorage.getItem('token');
    setIsLoggedIn(Boolean(token));
  }, []);

  const handleLogout = () => {
    localStorage.removeItem('token');
    setIsLoggedIn(false);
  };

  return (
    <nav className="bg-gradient-to-r from-purple-800 to-black shadow-md sticky top-0 z-20">
      <div className="max-w-7xl mx-auto h-16 flex items-center justify-between px-4 sm:px-6 lg:px-8">
        <Link href="/" className="flex items-center text-white text-3xl font-extrabold hover:text-gray-300 transition-colors duration-150">
          Abakar&apos;s Reads
        </Link>
        <div className="flex items-center gap-6">
          {isLoggedIn ? (
            <>
              <span className="text-white text-sm">Welcome, User!</span>
              <button
                onClick={handleLogout}
                className="px-4 py-2 bg-gradient-to-r from-green-400 to-green-600 text-white rounded-md shadow-lg transition-transform transform duration-150 hover:scale-105 hover:from-green-500 hover:to-green-700"
              >
                Logout
              </button>
              <Link href="/cart" className="relative flex items-center text-white hover:text-gray-300 transition-colors duration-150">
                <Image src="/cart.png" alt="Cart" width={32} height={32} className="transition-transform duration-300 transform hover:scale-110" />
                {books.length > 0 && (
                  <span className="absolute top-0 right-0 w-5 h-5 bg-red-600 text-white text-xs flex items-center justify-center rounded-full shadow-lg animate-pulse">
                    {books.length}
                  </span>
                )}
              </Link>
            </>
          ) : (
            <>
              <Link href="/login" className="px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-700 text-white rounded-md shadow-lg transition-transform transform duration-150 hover:scale-105 hover:from-blue-600 hover:to-blue-800">
                Log in
              </Link>
              <Link href="/register" className="px-4 py-2 text-white rounded-md hover:text-gray-300 transition-colors duration-150">
                Register
              </Link>
            </>
          )}
        </div>
      </div>
    </nav>
  );
};

export default Navbar;










///api/checkout






// pages/checkout.tsx
import { useEffect } from 'react';
import { useRouter } from 'next/router';
import { loadStripe } from '@stripe/stripe-js';

const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY!);

const Checkout = () => {
  const router = useRouter();
  const { bookName, bookPrice } = router.query;

  useEffect(() => {
    const createCheckoutSession = async () => {
      const response = await fetch('/api/checkout_sessions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          items: [
            { name: bookName, price: bookPrice, quantity: 1 },
          ],
        }),
      });

      const session = await response.json();

      const stripe = await stripePromise;
      const { error } = await stripe!.redirectToCheckout({
        sessionId: session.id,
      });

      if (error) {
        console.warn('Error:', error);
      }
    };

    if (bookName && bookPrice) {
      createCheckoutSession();
    }
  }, [bookName, bookPrice]);

  return <div>Redirecting to Stripe...</div>;
};

export default Checkout;






// pages/api/checkout_sessions.ts
import { NextApiRequest, NextApiResponse } from 'next';
import Stripe from 'stripe';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2024-06-20', // Replace with the correct version if known
});

// Define the type for the line items expected in req.body.items
type LineItem = {
  name: string;
  price: number; // Assuming price is given in cents
  quantity: number;
};

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'POST') {
    try {
      const session = await stripe.checkout.sessions.create({
        payment_method_types: ['card'],
        line_items: req.body.items.map((item: LineItem) => ({
          price_data: {
            currency: 'usd',
            product_data: {
              name: item.name,
            },
            unit_amount: item.price, // Amount in cents
          },
          quantity: item.quantity,
        })),
        mode: 'payment',
        success_url: `${req.headers.origin}/success`,
        cancel_url: `${req.headers.origin}/cancel`,
      });
 
      res.status(200).json({ id: session.id });
    } catch (err) {
      res.status(500).json({ error: (err as Error).message });
    }
  } else {
    res.setHeader('Allow', 'POST');
    res.status(405).end('Method Not Allowed');
  }
}










import React from 'react';

type NewsProps = {
  title: string;
  description: string;
  image?: string;
  date: string;
  link?: string;
};

const NewsCard: React.FC<NewsProps> = ({ title, description, image, date, link }) => {
  return (
    <div className="relative transform transition duration-300 ease-in-out hover:scale-105 cursor-pointer bg-white/70 dark:bg-gray-800/70 backdrop-blur-md shadow-lg rounded-lg p-4">
      {image && <img src={image} alt={title} className="w-full h-40 object-cover rounded-t-lg" />}
      <div className="p-4">
        <h3 className="text-xl font-bold text-gray-900 dark:text-white">{title}</h3>
        <p className="text-gray-700 dark:text-gray-300">{description}</p>
        <span className="text-sm text-gray-500 dark:text-gray-400">{date}</span>
      </div>
      {link && (
        <a href={link} className="absolute inset-0">
          <span className="sr-only">Read more</span>
        </a>
      )}
    </div>
  );
};

export default NewsCard;











// models/User.js
import mongoose from 'mongoose';
import bcrypt from 'bcryptjs';

const UserSchema = new mongoose.Schema({
  email: {
    type: String,
    required: [true, 'Please provide an email'],
    unique: true,
  },
  password: {
    type: String,
    required: [true, 'Please provide a password'],
  },
});

// Hash password before saving
UserSchema.pre('save', async function (next) {
  if (!this.isModified('password')) {
    next();
  }
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

// Compare user entered password with hashed password in database
UserSchema.methods.comparePassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

export default mongoose.models.User || mongoose.model('User', UserSchema);









@media (prefers-color-scheme: dark) {
  body {
    background-color: rgb(80, 80, 189);
    color: black;
  }
}