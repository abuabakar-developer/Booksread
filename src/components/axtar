//lib/mongodb.ts 
import mongoose from 'mongoose';

const MONGO_URL = process.env.MONGO_URL as string;

let isConnected = false;

export const connectToDatabase = async (): Promise<void> => {
  if (isConnected) return;

  if (!MONGO_URL) {
    throw new Error('MONGO_URL environment variable is not defined.');
  }

  try {
    await mongoose.connect(MONGO_URL);
    isConnected = true;
    console.log('MongoDB connected successfully');
  } catch (error) {
    console.error('MongoDB connection error:', error);
    process.exit(1); // Exit process with an error code
  }
};











// models/User.js
import mongoose from 'mongoose';
import bcrypt from 'bcryptjs';

const UserSchema = new mongoose.Schema({
  email: {
    type: String,
    required: [true, 'Please provide an email'],
    unique: true,
  },
  password: {
    type: String,
    required: [true, 'Please provide a password'],
  },
});

// Hash password before saving
UserSchema.pre('save', async function (next) {
  if (!this.isModified('password')) {
    next();
  }
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

// Compare user entered password with hashed password in database
UserSchema.methods.comparePassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

export default mongoose.models.User || mongoose.model('User', UserSchema);










// pages/api/auth/register.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import { connectToDatabase } from '../../../lib/mongodb';
import User from '../../../models/User';

type Data = {
  message?: string;
};

export default async function handler(req: NextApiRequest, res: NextApiResponse<Data>) {
  await connectToDatabase();

  if (req.method === 'POST') {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ message: 'Email and password are required' });
    }

    try {
      const existingUser = await User.findOne({ email });
      if (existingUser) {
        return res.status(400).json({ message: 'User already exists' });
      }

      const user = new User({ email, password });
      await user.save();

      res.status(201).json({ message: 'User registered successfully' });
    } catch (error) {
      res.status(500).json({ message: 'Server error' });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}








// pages/api/auth/login.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import { connectToDatabase } from '../../../lib/mongodb';
import User from '../../../models/User';
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET as string;

type Data = {
  token?: string;
  message?: string;
};

export default async function handler(req: NextApiRequest, res: NextApiResponse<Data>) {
  await connectToDatabase();

  if (req.method === 'POST') {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ message: 'Email and password are required' });
    }

    try {
      const user = await User.findOne({ email });
      if (!user || !(await user.comparePassword(password))) {
        return res.status(401).json({ message: 'Invalid credentials' });
      }

      const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: '1h' });
      res.status(200).json({ token });
    } catch (error) {
      res.status(500).json({ message: 'Server error' });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}









///pages/LoginForm.tsx

import LoginForm from './LoginForm';
import Link from 'next/link';
import { NextPage } from 'next';

const LoginPage: NextPage = () => {
  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-green-500 via-blue-600 to-indigo-700 p-6">
      <div className="relative bg-white p-10 rounded-3xl shadow-lg ring-1 ring-gray-900/10 w-full max-w-md">
        <div className="absolute inset-0 bg-gradient-to-r from-indigo-300 to-blue-300 opacity-20 rounded-3xl"></div>
        <h1 className="text-4xl font-extrabold text-center text-gray-800 relative z-10 mb-4">
          Welcome Back
        </h1>
        <p className="text-center text-gray-600 relative z-10 mb-8">
          Sign in to your account
        </p>
        <LoginForm />
        <p className="mt-6 text-center text-gray-700 relative z-10">
          Donâ€™t have an account?{' '}
          <Link href="/register" className="text-blue-600 font-semibold hover:text-indigo-500 hover:underline">
            Register here
          </Link>
        </p>
      </div>
    </div>
  );
};

export default LoginPage;







//pages/protected/tsx
import { getSession } from 'next-auth/react';
import { GetServerSideProps } from 'next';

export default function ProtectedPage() {
  return <div>This is a protected page.</div>;
}

//export const getServerSideProps: GetServerSideProps = async (context) => {
//  const session = await getSession(context);
//
//  if (!session) {
//    return {
//      redirect: {
//        destination: '/auth/signin',
//        permanent: false,
//      },
//    };
//  }
//
//  return {
//    props: { session },
//  };
//};






//LoginForm.tsx
import { useState, FormEvent } from 'react';
import { useRouter } from 'next/router';
import { FiMail, FiLock } from 'react-icons/fi';
import Link from 'next/link';

export default function LoginForm() {
  const [email, setEmail] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);
  const router = useRouter();

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setLoading(true);

    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      const result = await response.json();
      setLoading(false);

      if (response.ok) {
        localStorage.setItem('token', result.token);
        router.push('/'); // Redirect to the home page
      } else {
        alert(result.message);
      }
    } catch (error) {
      setLoading(false);
      alert('An unexpected error occurred.');
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-green-500 via-blue-600 to-indigo-700 p-6">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-xl shadow-lg ring-1 ring-gray-900/10">
        <h2 className="text-3xl font-bold text-center text-gray-800">Login</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="relative">
            <FiMail className="absolute top-3 left-4 text-gray-500" />
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="Email"
              required
              className="w-full px-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div className="relative">
            <FiLock className="absolute top-3 left-4 text-gray-500" />
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Password"
              required
              className="w-full px-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <button
            type="submit"
            className="w-full py-3 text-white bg-gradient-to-r from-blue-600 to-indigo-600 rounded-lg hover:bg-blue-700 transition duration-300"
            disabled={loading}
          >
            {loading ? 'Logging in...' : 'Login'}
          </button>
        </form>
        <p className="text-sm text-center text-gray-600 mt-4">
          Don&apos;t have an account?{' '}
          <Link href="/register" className="text-blue-600 hover:underline">
            Sign up
          </Link>
        </p>
      </div>
    </div>
  );
}








//regisetrForm.tsx 

import { useState, FormEvent } from 'react';
import { FiMail, FiLock } from 'react-icons/fi';
import Link from 'next/link';

export default function RegisterForm() {
  const [email, setEmail] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setLoading(true);

    try {
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      const result = await response.json();
      setLoading(false);

      if (response.ok) {
        alert('Registration successful');
      } else {
        alert(result.message);
      }
    } catch (error) {
      setLoading(false);
      alert('An unexpected error occurred.');
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-purple-500 via-pink-500 to-red-500 p-6">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-xl shadow-lg ring-1 ring-gray-900/10">
        <h2 className="text-3xl font-bold text-center text-gray-800">Register</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="relative">
            <FiMail className="absolute top-3 left-4 text-gray-500" />
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="Email"
              required
              className="w-full px-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500"
            />
          </div>
          <div className="relative">
            <FiLock className="absolute top-3 left-4 text-gray-500" />
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Password"
              required
              className="w-full px-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500"
            />
          </div>
          <button
            type="submit"
            className="w-full py-3 text-white bg-gradient-to-r from-pink-600 to-red-600 rounded-lg hover:bg-pink-700 transition duration-300"
            disabled={loading}
          >
            {loading ? 'Registering...' : 'Register'}
          </button>
        </form>
        <p className="text-sm text-center text-gray-600 mt-4">
          Already have an account?{' '}
          <Link href="/login" className="text-pink-600 hover:underline">
            Log in
          </Link>
        </p>
      </div>
    </div>
  );
}








//checkoutButton.tsx 

import { loadStripe } from '@stripe/stripe-js';
import { useState } from 'react';

const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY!);

const CheckoutButton = ({ items }: { items: Array<{ id: string; quantity: number }> }) => {
  const [loading, setLoading] = useState(false);

  const handleClick = async () => {
    setLoading(true);
    const response = await fetch('/api/create-checkout-session', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ items }),
    });

    const { id } = await response.json();
    const stripe = await stripePromise;

    const { error } = await stripe!.redirectToCheckout({ sessionId: id });

    if (error) {
      console.error(error);
      setLoading(false);
    }
  };

  return (
    <button
      role="link"
      onClick={handleClick}
      disabled={loading}
      className="px-4 py-2 bg-blue-500 text-white rounded"
    >
      {loading ? 'Processing...' : 'Checkout'}
    </button>
  );
};

export default CheckoutButton;





/////navbar.tsx 
import { useEffect, useState } from 'react';
import Link from 'next/link';
import { useSelector } from 'react-redux';
import { RootState } from '@/types/rootState';
import Image from 'next/image';

const Navbar = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const books = useSelector((state: RootState) => state.cart.books);

  useEffect(() => {
    const token = localStorage.getItem('token');
    setIsLoggedIn(Boolean(token));
  }, []);

  const handleLogout = () => {
    localStorage.removeItem('token');
    setIsLoggedIn(false);
  };

  return (
    <nav className="bg-gradient-to-r from-purple-800 to-black shadow-md sticky top-0 z-20">
      <div className="max-w-7xl mx-auto h-16 flex items-center justify-between px-4 sm:px-6 lg:px-8">
        <Link href="/" className="flex items-center text-white text-3xl font-extrabold hover:text-gray-300 transition-colors duration-150">
          Abakar&apos;s Reads
        </Link>
        <div className="flex items-center gap-6">
          {isLoggedIn ? (
            <>
              <span className="text-white text-sm">Welcome, User!</span>
              <button
                onClick={handleLogout}
                className="px-4 py-2 bg-gradient-to-r from-green-400 to-green-600 text-white rounded-md shadow-lg transition-transform transform duration-150 hover:scale-105 hover:from-green-500 hover:to-green-700"
              >
                Logout
              </button>
              <Link href="/cart" className="relative flex items-center text-white hover:text-gray-300 transition-colors duration-150">
                <Image src="/cart.png" alt="Cart" width={32} height={32} className="transition-transform duration-300 transform hover:scale-110" />
                {books.length > 0 && (
                  <span className="absolute top-0 right-0 w-5 h-5 bg-red-600 text-white text-xs flex items-center justify-center rounded-full shadow-lg animate-pulse">
                    {books.length}
                  </span>
                )}
              </Link>
            </>
          ) : (
            <>
              <Link href="/login" className="px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-700 text-white rounded-md shadow-lg transition-transform transform duration-150 hover:scale-105 hover:from-blue-600 hover:to-blue-800">
                Log in
              </Link>
              <Link href="/register" className="px-4 py-2 text-white rounded-md hover:text-gray-300 transition-colors duration-150">
                Register
              </Link>
            </>
          )}
        </div>
      </div>
    </nav>
  );
};

export default Navbar;










///api/checkout






// pages/checkout.tsx
import { useEffect } from 'react';
import { useRouter } from 'next/router';
import { loadStripe } from '@stripe/stripe-js';

const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY!);

const Checkout = () => {
  const router = useRouter();
  const { bookName, bookPrice } = router.query;

  useEffect(() => {
    const createCheckoutSession = async () => {
      const response = await fetch('/api/checkout_sessions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          items: [
            { name: bookName, price: bookPrice, quantity: 1 },
          ],
        }),
      });

      const session = await response.json();

      const stripe = await stripePromise;
      const { error } = await stripe!.redirectToCheckout({
        sessionId: session.id,
      });

      if (error) {
        console.warn('Error:', error);
      }
    };

    if (bookName && bookPrice) {
      createCheckoutSession();
    }
  }, [bookName, bookPrice]);

  return <div>Redirecting to Stripe...</div>;
};

export default Checkout;






// pages/api/checkout_sessions.ts
import { NextApiRequest, NextApiResponse } from 'next';
import Stripe from 'stripe';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2024-06-20', // Replace with the correct version if known
});

// Define the type for the line items expected in req.body.items
type LineItem = {
  name: string;
  price: number; // Assuming price is given in cents
  quantity: number;
};

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'POST') {
    try {
      const session = await stripe.checkout.sessions.create({
        payment_method_types: ['card'],
        line_items: req.body.items.map((item: LineItem) => ({
          price_data: {
            currency: 'usd',
            product_data: {
              name: item.name,
            },
            unit_amount: item.price, // Amount in cents
          },
          quantity: item.quantity,
        })),
        mode: 'payment',
        success_url: `${req.headers.origin}/success`,
        cancel_url: `${req.headers.origin}/cancel`,
      });
 
      res.status(200).json({ id: session.id });
    } catch (err) {
      res.status(500).json({ error: (err as Error).message });
    }
  } else {
    res.setHeader('Allow', 'POST');
    res.status(405).end('Method Not Allowed');
  }
}










import React from 'react';

type NewsProps = {
  title: string;
  description: string;
  image?: string;
  date: string;
  link?: string;
};

const NewsCard: React.FC<NewsProps> = ({ title, description, image, date, link }) => {
  return (
    <div className="relative transform transition duration-300 ease-in-out hover:scale-105 cursor-pointer bg-white/70 dark:bg-gray-800/70 backdrop-blur-md shadow-lg rounded-lg p-4">
      {image && <img src={image} alt={title} className="w-full h-40 object-cover rounded-t-lg" />}
      <div className="p-4">
        <h3 className="text-xl font-bold text-gray-900 dark:text-white">{title}</h3>
        <p className="text-gray-700 dark:text-gray-300">{description}</p>
        <span className="text-sm text-gray-500 dark:text-gray-400">{date}</span>
      </div>
      {link && (
        <a href={link} className="absolute inset-0">
          <span className="sr-only">Read more</span>
        </a>
      )}
    </div>
  );
};

export default NewsCard;











// models/User.js
import mongoose from 'mongoose';
import bcrypt from 'bcryptjs';

const UserSchema = new mongoose.Schema({
  email: {
    type: String,
    required: [true, 'Please provide an email'],
    unique: true,
  },
  password: {
    type: String,
    required: [true, 'Please provide a password'],
  },
});

// Hash password before saving
UserSchema.pre('save', async function (next) {
  if (!this.isModified('password')) {
    next();
  }
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

// Compare user entered password with hashed password in database
UserSchema.methods.comparePassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

export default mongoose.models.User || mongoose.model('User', UserSchema);









@media (prefers-color-scheme: dark) {
  body {
    background-color: rgb(80, 80, 189);
    color: black;
  }
}






///details page
'use client';

import React, { useEffect, useState, useRef } from 'react';
import { BsFillCartFill } from 'react-icons/bs';
import { FiStar } from 'react-icons/fi';
import Image from 'next/image';
import ReviewModal from '@/components/ReviewModal';
import ReviewCard from '@/components/ReviewCard';
import { loadStripe } from '@stripe/stripe-js';

const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY!);

const Details = ({ params }: { params: { id: string } }) => {
  const id = params.id;
  const URL = `https://www.googleapis.com/books/v1/volumes/${id}?key=${process.env.NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY}`;
  const [book, setBook] = useState<any>(null);
  const [reviews, setReviews] = useState<any[]>([]);
  const [showModal, setShowModal] = useState(false);
  const reviewSectionRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => { 
    const fetchDetails = async () => { 
      try {
        const res = await fetch(URL);
        const data = await res.json();

        const details = {
          title: data.volumeInfo.title,
          desc: data.volumeInfo.description || "No description available",
          id: data.id,
          cover_image: data.volumeInfo.imageLinks?.thumbnail || "/no-cover.jpg",
          pages: data.volumeInfo.pageCount || "N/A",
        };

        setBook(details);
      } catch (error) {
        console.log('Error fetching book details:', error);
      }
    };
    fetchDetails();
  }, [URL]);

  useEffect(() => {
    const fetchReviews = async () => {
      try {
        const res = await fetch(`/api/reviews?bookId=${id}`);
        const data = await res.json();
        setReviews(Array.isArray(data) ? data : []);
      } catch (error) {
        console.log('Error fetching reviews:', error);
        setReviews([]);
      }
    };
    fetchReviews();
  }, [id]);

  const handleShowModal = () => setShowModal(true);
  const handleHideModal = () => setShowModal(false);

  const handleAddToCart = async () => {
    if (!book) return;

    const price = book.pages !== "N/A" ? ((book.pages / 100) * 5).toFixed(2) : "0.00";

    try {
      const res = await fetch('/api/checkout_sessions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          items: [
            {
              name: book.title,
              price: parseFloat(price) * 100,
              quantity: 1
            },
          ],
        }),
      });

      if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
      }

      const { id } = await res.json();

      const stripe = await stripePromise;
      const { error } = await stripe!.redirectToCheckout({ sessionId: id });

      if (error) {
        console.error('Error redirecting to checkout:', error);
      }
    } catch (error) {
      console.error('Error creating checkout session or redirecting to checkout:', error);
    }
  };

  const handleShowReviews = () => {
    if (reviewSectionRef.current) {
      reviewSectionRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  };

  const handleReviewSubmit = async (newReview: any) => {
    try {
      const res = await fetch(`/api/reviews`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newReview),
      });

      if (!res.ok) {
        throw new Error('Failed to submit review');
      }

      const reviewData = await res.json();
      setReviews(prevReviews => [reviewData, ...prevReviews]);
      handleHideModal();
    } catch (error) {
      console.log('Error submitting review:', error);
    }
  };

  if (!book) {
    return <div>Loading...</div>;
  }

  return (
    <div className="mt-10 p-10 bg-gradient-to-r from-gray-50 to-gray-100 rounded-lg shadow-2xl">
      <div className="max-w-7xl mx-auto">
        <div className="flex flex-col md:flex-row gap-10">
          <div className="flex-1 relative h-80">
            <Image
              src={book.cover_image}
              alt="book cover"
              layout="fill"
              objectFit="cover"
              className="rounded-lg shadow-lg"
            />
          </div>
          <div className="flex-1 flex flex-col">
            <h1 className="text-5xl font-serif font-bold text-gray-900 mb-6">{book.title}</h1>
            <p className="text-lg text-gray-700 mb-6">{book.desc}</p>
            <div className="flex justify-between items-center mb-6">
              <span className="text-2xl font-semibold text-green-800">Price: ${(book.pages !== "N/A" ? (book.pages / 100) * 5 : 0).toFixed(2)}</span>
              <span className="text-2xl font-semibold text-gray-800">Pages: {book.pages}</span>
            </div>
            <div className="flex gap-4">
              <button
                onClick={handleAddToCart}
                className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-full flex items-center shadow-md transition transform hover:scale-105"
              >
                Add to Cart <BsFillCartFill className="ml-2" />
              </button>
              <button
                onClick={() => {
                  handleShowModal();
                  handleShowReviews();
                }}
                className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-6 rounded-full flex items-center shadow-md transition transform hover:scale-105"
              >
                Review Book <FiStar className="ml-2" />
              </button>
            </div>
            {showModal && (
              <ReviewModal
                handleHideModal={handleHideModal}
                bookId={book.id}
                onSubmit={handleReviewSubmit}
              />
            )}
          </div>
        </div>
        <div
          ref={reviewSectionRef}
          className="mt-10"
        >
          <h2 className="text-3xl font-bold text-gray-900 mb-6">Reviews</h2>
          <div className="grid gap-6">
            {reviews.length > 0 ? (
              reviews.map((review) => (
                <ReviewCard key={review._id} review={review} />
              ))
            ) : (
              <p className="text-gray-600">No reviews yet. Be the first to review!</p>
            )}
          </div>
        </div>
      </div>  
    </div>
  );
};

export default Details;






//// src/redux/cartSlice.ts
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

// Define the Book interface to type the book objects
export interface Book {
    id: string;
    title: string;
    author: string;
    quantity: number;
    cover_image: 'https://example.com/great-gatsby.jpg',
    price: 10,
    // Add other properties as needed
} 

// Define the CartState interface to type the state
export interface CartState {
    books: Book[];
}
      
// Initialize the state with the correct type
const initialState: CartState = {
    books: [],
};

export const cartSlice = createSlice({
    name: "cart",
    initialState,
    reducers: {
        addBook: (state, action: PayloadAction<Book>) => {
            const book = state.books.find((book) => book.id === action.payload.id);

            if (book) {
                book.quantity = action.payload.quantity;
            } else {
                state.books.push(action.payload);
            }
        },
        removeBook: (state, action: PayloadAction<{ id: string }>) => {
            state.books = state.books.filter((book) => book.id !== action.payload.id);
        },
    },
});

export const { addBook, removeBook } = cartSlice.actions;

export default cartSlice.reducer;
    


// pages/success.tsx
import { useRouter } from 'next/router';

const Success = () => {
  const router = useRouter();

  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-r from-green-300 via-blue-500 to-purple-600 p-4">
      <div className="bg-white rounded-lg shadow-2xl p-6 md:p-12 w-full max-w-lg flex flex-col items-center justify-center text-center transform transition-transform duration-500 hover:scale-105">
        <div className="relative mb-6">
          <svg
            className="w-24 h-24 text-purple-500 animate-pulse"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M9 12l2 2 4-4m5 2a9 9 0 11-18 0 9 9 0 0118 0z"
            ></path>
          </svg>
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="w-24 h-24 border-4 border-purple-500 rounded-full animate-ping"></div>
          </div>
        </div>
        <h1 className="text-4xl md:text-5xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-purple-600 via-pink-500 to-red-400 mb-4 animate-fade-in">
          Congratulations!
        </h1>
        <p className="text-lg md:text-xl text-gray-800 mb-6">
          Your order has been successfully placed.
        </p>
        <p className="text-md md:text-lg text-gray-600 mb-8">
          Weâ€™re processing it and will update you soon. Please check your email for the transaction details.
        </p>
        <button
          onClick={() => router.push('/')}
          className="bg-gradient-to-r from-purple-600 to-red-500 text-white px-8 py-4 rounded-full shadow-lg hover:bg-gradient-to-l hover:from-red-500 hover:to-purple-600 transition duration-300 transform hover:scale-110"
        >
          Go to Home
        </button>
      </div>
    </div>
  );
};

export default Success;






///
"use client"
import React, { useEffect, useState } from 'react';
import BookCard from './bookCard';
import Pagination from './pagination';
import Details from '@/app/details/[id]/page';
import { fetchBooks } from '../lib/fetchBooks';
import LatestBooksSection from './LatestBooksSection';

type Book = {
  id: string;
  title: string;
  author: string;
};

const BookCatalog = () => {
  const [query, setQuery] = useState('the lord of the rings');
  const [searchType, setSearchType] = useState('intitle');
  const [books, setBooks] = useState<Book[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [itemOffset, setItemOffset] = useState(0);
  const itemsPerPage = 6;
  const [selectedBookId, setSelectedBookId] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setIsLoading(true);
        const booksData = await fetchBooks(`${searchType}:${query}`);
        setBooks(booksData);
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [query, searchType]);

  const endOffset = itemOffset + itemsPerPage;
  const currentBooks = books.slice(itemOffset, endOffset);

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setQuery(e.target.value);
  };

  const handleSearchTypeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSearchType(e.target.value === 'title' ? 'intitle' : 'inauthor');
  };

  const handleBookClick = (book: Book) => {
    setSelectedBookId(book.id);
  };

  if (selectedBookId) {
    return <Details params={{ id: selectedBookId }} />;
  }

  return (
    <div className="py-20 mt-10 h-full w-full">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        
        {/* Latest Books Section */}
        <LatestBooksSection />

        {/* Book Catalog Section */}
        <div className="bg-gradient-to-b from-gray-200 via-gray-300 to-gray-400 dark:from-gray-800 dark:via-gray-700 dark:to-gray-600 py-20 mt-16 rounded-lg shadow-lg">
          <div className="flex flex-col justify-center items-center gap-5 mb-10">
            <h5 className="text-2xl text-gray-900 dark:text-white font-semibold tracking-wide">Book Collection</h5>
            <h2 className="text-5xl text-gray-900 dark:text-white font-extrabold leading-tight text-center">
              Embark on Your Next Adventure
            </h2>
            <div className="flex gap-2 w-full max-w-lg shadow-lg rounded-full overflow-hidden bg-white dark:bg-gray-800 backdrop-blur-md">
              <input
                type="text"
                value={query}
                onChange={handleSearch}
                placeholder="Search by title or author..."
                className="border-0 p-4 w-full rounded-l-full focus:ring-4 focus:ring-blue-500 outline-none bg-transparent dark:text-white placeholder-gray-500"
              />
              <select
                value={searchType}
                onChange={handleSearchTypeChange}
                className="border-0 p-4 bg-gradient-to-r from-blue-500 to-indigo-500 text-white rounded-r-full cursor-pointer focus:ring-4 focus:ring-blue-500 outline-none"
              >
                <option value="title">Title</option>
                <option value="author">Author</option>
              </select>
            </div>
          </div>

          {isLoading ? (
            <div className="flex justify-center items-center mt-20">
              <div className="border-t-4 border-b-4 border-blue-600 rounded-full w-16 h-16 animate-spin" />
            </div>
          ) : (
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-10">
              {currentBooks.map((book: Book) => (
                <div 
                  key={book.id} 
                  onClick={() => handleBookClick(book)} 
                  className="relative transform transition-transform duration-300 ease-in-out hover:scale-105 cursor-pointer bg-white dark:bg-gray-800 backdrop-blur-md shadow-lg rounded-lg p-4"
                >
                  <BookCard book={book} />
                  <div className="absolute top-2 right-2 bg-blue-500 text-white rounded-full px-2 py-1 text-xs">New</div>
                </div>
              ))}
            </div>
          )}

          {!isLoading && (
            <div className="mt-10">
              <Pagination
                setItemOffset={setItemOffset}
                itemsPerPage={itemsPerPage}
                books={books}
              />
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default BookCatalog;







import React from 'react';
import Image from 'next/image';

interface BookCardProps {
  book: {
    id: string;
    title: string;
    author_name?: string[];
    published_year?: number;
    public_rating?: number;
  };
}

const BookCard: React.FC<BookCardProps> = ({ book }) => {
  const coverImageUrl = `https://books.google.com/books/content?id=${book.id}&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api`;

  return (
    <div className="bg-white/70 dark:bg-gray-800/70 p-6 rounded-xl shadow-lg transform transition-transform hover:scale-105 hover:rotate-1 hover:shadow-2xl backdrop-blur-lg">
      <div className="relative w-full h-64 mb-6 overflow-hidden rounded-lg">
        <Image
          src={coverImageUrl}
          alt={`Cover of ${book.title}`}
          layout="fill"
          objectFit="cover"
          className="rounded-lg"
          quality={85}
        />
      </div>
      <h3 className="text-xl font-bold mb-2 line-clamp-2" style={{ fontFamily: 'Poppins, sans-serif', color: '#2c3e50' }}>
        {book.title}
      </h3>
      <p className="text-sm mb-1" style={{ fontFamily: 'Montserrat, sans-serif', color: '#8e44ad' }}>
        Author: {book.author_name?.join(', ') || 'Unknown'}
      </p>
      <p className="text-xs mb-1" style={{ fontFamily: 'Roboto Mono, monospace', color: '#16a085' }}>
        Published: {book.published_year || 'N/A'}
      </p>
      <p className="text-sm" style={{ fontFamily: 'Roboto Mono, monospace', color: '#c0392b' }}>
        Rating: {book.public_rating ? `${book.public_rating} / 5` : 'N/A'}
      </p>
    </div>
  );
};

export default BookCard;










import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
    },
  },
  plugins: [],
};
export default config;

